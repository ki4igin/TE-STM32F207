
build/debug/usb_cdc.elf:     file format elf32-littlearm


Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	200001e0 	.word	0x200001e0
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08003030 	.word	0x08003030

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	200001e4 	.word	0x200001e4
 80001c0:	08003030 	.word	0x08003030

080001c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c4:	b508      	push	{r3, lr}
  *         @arg @ref LL_FLASH_LATENCY_7
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80001c6:	4a29      	ldr	r2, [pc, #164]	; (800026c <SystemClock_Config+0xa8>)
 80001c8:	6813      	ldr	r3, [r2, #0]
 80001ca:	f023 030f 	bic.w	r3, r3, #15
 80001ce:	f043 0303 	orr.w	r3, r3, #3
 80001d2:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_6
  *         @arg @ref LL_FLASH_LATENCY_7
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80001d4:	6813      	ldr	r3, [r2, #0]
 80001d6:	f003 030f 	and.w	r3, r3, #15
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 80001da:	2b03      	cmp	r3, #3
 80001dc:	d1fa      	bne.n	80001d4 <SystemClock_Config+0x10>
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80001de:	4a24      	ldr	r2, [pc, #144]	; (8000270 <SystemClock_Config+0xac>)
 80001e0:	6813      	ldr	r3, [r2, #0]
 80001e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001e6:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80001e8:	6813      	ldr	r3, [r2, #0]
  {
  }
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80001ea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80001ee:	d0fb      	beq.n	80001e8 <SystemClock_Config+0x24>
  *         @arg @ref LL_RCC_PLLP_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP,
 80001f0:	4b1f      	ldr	r3, [pc, #124]	; (8000270 <SystemClock_Config+0xac>)
 80001f2:	685a      	ldr	r2, [r3, #4]
 80001f4:	491f      	ldr	r1, [pc, #124]	; (8000274 <SystemClock_Config+0xb0>)
 80001f6:	4011      	ands	r1, r2
 80001f8:	4a1f      	ldr	r2, [pc, #124]	; (8000278 <SystemClock_Config+0xb4>)
 80001fa:	430a      	orrs	r2, r1
 80001fc:	605a      	str	r2, [r3, #4]
  *         @arg @ref LL_RCC_PLLQ_DIV_15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 80001fe:	685a      	ldr	r2, [r3, #4]
 8000200:	491e      	ldr	r1, [pc, #120]	; (800027c <SystemClock_Config+0xb8>)
 8000202:	4011      	ands	r1, r2
 8000204:	4a1e      	ldr	r2, [pc, #120]	; (8000280 <SystemClock_Config+0xbc>)
 8000206:	430a      	orrs	r2, r1
 8000208:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800020a:	681a      	ldr	r2, [r3, #0]
 800020c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000210:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000212:	461a      	mov	r2, r3
 8000214:	6813      	ldr	r3, [r2, #0]
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_20, 192, LL_RCC_PLLP_DIV_2);
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_20, 192, LL_RCC_PLLQ_DIV_5);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000216:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800021a:	d0fb      	beq.n	8000214 <SystemClock_Config+0x50>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800021c:	4b14      	ldr	r3, [pc, #80]	; (8000270 <SystemClock_Config+0xac>)
 800021e:	689a      	ldr	r2, [r3, #8]
 8000220:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000224:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000226:	689a      	ldr	r2, [r3, #8]
 8000228:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800022c:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000230:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000232:	689a      	ldr	r2, [r3, #8]
 8000234:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000238:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800023c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800023e:	689a      	ldr	r2, [r3, #8]
 8000240:	f022 0203 	bic.w	r2, r2, #3
 8000244:	f042 0202 	orr.w	r2, r2, #2
 8000248:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800024a:	461a      	mov	r2, r3
 800024c:	6893      	ldr	r3, [r2, #8]
 800024e:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000252:	2b08      	cmp	r3, #8
 8000254:	d1fa      	bne.n	800024c <SystemClock_Config+0x88>
  {

  }
  LL_SetSystemCoreClock(120000000);
 8000256:	480b      	ldr	r0, [pc, #44]	; (8000284 <SystemClock_Config+0xc0>)
 8000258:	f001 fd38 	bl	8001ccc <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800025c:	200f      	movs	r0, #15
 800025e:	f000 f865 	bl	800032c <HAL_InitTick>
 8000262:	b900      	cbnz	r0, 8000266 <SystemClock_Config+0xa2>
  {
    Error_Handler();
  }
}
 8000264:	bd08      	pop	{r3, pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000266:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000268:	e7fe      	b.n	8000268 <SystemClock_Config+0xa4>
 800026a:	bf00      	nop
 800026c:	40023c00 	.word	0x40023c00
 8000270:	40023800 	.word	0x40023800
 8000274:	ffbc8000 	.word	0xffbc8000
 8000278:	00403014 	.word	0x00403014
 800027c:	f0bf8000 	.word	0xf0bf8000
 8000280:	05403014 	.word	0x05403014
 8000284:	07270e00 	.word	0x07270e00

08000288 <main>:
{
 8000288:	b500      	push	{lr}
 800028a:	b083      	sub	sp, #12
  HAL_Init();
 800028c:	f000 f874 	bl	8000378 <HAL_Init>
  SystemClock_Config();
 8000290:	f7ff ff98 	bl	80001c4 <SystemClock_Config>
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000294:	4b0a      	ldr	r3, [pc, #40]	; (80002c0 <main+0x38>)
 8000296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000298:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800029c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800029e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80002a0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80002a4:	9200      	str	r2, [sp, #0]
  (void)tmpreg;
 80002a6:	9a00      	ldr	r2, [sp, #0]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80002a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80002aa:	f042 0201 	orr.w	r2, r2, #1
 80002ae:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80002b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b2:	f003 0301 	and.w	r3, r3, #1
 80002b6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80002b8:	9b01      	ldr	r3, [sp, #4]
  MX_USB_DEVICE_Init();
 80002ba:	f002 fb3d 	bl	8002938 <MX_USB_DEVICE_Init>
  while (1)
 80002be:	e7fe      	b.n	80002be <main+0x36>
 80002c0:	40023800 	.word	0x40023800

080002c4 <Error_Handler>:
 80002c4:	b672      	cpsid	i
  while (1)
 80002c6:	e7fe      	b.n	80002c6 <Error_Handler+0x2>

080002c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002c8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002ca:	2100      	movs	r1, #0
 80002cc:	9100      	str	r1, [sp, #0]
 80002ce:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <HAL_MspInit+0x34>)
 80002d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80002d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80002d6:	645a      	str	r2, [r3, #68]	; 0x44
 80002d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80002da:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80002de:	9200      	str	r2, [sp, #0]
 80002e0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002e2:	9101      	str	r1, [sp, #4]
 80002e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80002e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80002ea:	641a      	str	r2, [r3, #64]	; 0x40
 80002ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002f6:	b002      	add	sp, #8
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	40023800 	.word	0x40023800

08000300 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000300:	e7fe      	b.n	8000300 <NMI_Handler>

08000302 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000302:	e7fe      	b.n	8000302 <HardFault_Handler>

08000304 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000304:	e7fe      	b.n	8000304 <MemManage_Handler>

08000306 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000306:	e7fe      	b.n	8000306 <BusFault_Handler>

08000308 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000308:	e7fe      	b.n	8000308 <UsageFault_Handler>

0800030a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800030a:	4770      	bx	lr

0800030c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800030c:	4770      	bx	lr

0800030e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800030e:	4770      	bx	lr

08000310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000310:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000312:	f000 f84b 	bl	80003ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000316:	bd08      	pop	{r3, pc}

08000318 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000318:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800031a:	4802      	ldr	r0, [pc, #8]	; (8000324 <OTG_FS_IRQHandler+0xc>)
 800031c:	f000 fa9e 	bl	800085c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000320:	bd08      	pop	{r3, pc}
 8000322:	bf00      	nop
 8000324:	200016c8 	.word	0x200016c8

08000328 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000328:	4770      	bx	lr
	...

0800032c <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800032c:	b510      	push	{r4, lr}
 800032e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000330:	4b0e      	ldr	r3, [pc, #56]	; (800036c <HAL_InitTick+0x40>)
 8000332:	7818      	ldrb	r0, [r3, #0]
 8000334:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000338:	fbb3 f3f0 	udiv	r3, r3, r0
 800033c:	4a0c      	ldr	r2, [pc, #48]	; (8000370 <HAL_InitTick+0x44>)
 800033e:	6810      	ldr	r0, [r2, #0]
 8000340:	fbb0 f0f3 	udiv	r0, r0, r3
 8000344:	f000 f8b0 	bl	80004a8 <HAL_SYSTICK_Config>
 8000348:	b968      	cbnz	r0, 8000366 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800034a:	2c0f      	cmp	r4, #15
 800034c:	d901      	bls.n	8000352 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800034e:	2001      	movs	r0, #1
 8000350:	e00a      	b.n	8000368 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000352:	2200      	movs	r2, #0
 8000354:	4621      	mov	r1, r4
 8000356:	f04f 30ff 	mov.w	r0, #4294967295
 800035a:	f000 f861 	bl	8000420 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800035e:	4b05      	ldr	r3, [pc, #20]	; (8000374 <HAL_InitTick+0x48>)
 8000360:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000362:	2000      	movs	r0, #0
 8000364:	e000      	b.n	8000368 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000366:	2001      	movs	r0, #1
}
 8000368:	bd10      	pop	{r4, pc}
 800036a:	bf00      	nop
 800036c:	20000004 	.word	0x20000004
 8000370:	20000000 	.word	0x20000000
 8000374:	20000008 	.word	0x20000008

08000378 <HAL_Init>:
{
 8000378:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <HAL_Init+0x30>)
 800037c:	681a      	ldr	r2, [r3, #0]
 800037e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000382:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800038a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000392:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000394:	2003      	movs	r0, #3
 8000396:	f000 f831 	bl	80003fc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800039a:	200f      	movs	r0, #15
 800039c:	f7ff ffc6 	bl	800032c <HAL_InitTick>
  HAL_MspInit();
 80003a0:	f7ff ff92 	bl	80002c8 <HAL_MspInit>
}
 80003a4:	2000      	movs	r0, #0
 80003a6:	bd08      	pop	{r3, pc}
 80003a8:	40023c00 	.word	0x40023c00

080003ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80003ac:	4a03      	ldr	r2, [pc, #12]	; (80003bc <HAL_IncTick+0x10>)
 80003ae:	6811      	ldr	r1, [r2, #0]
 80003b0:	4b03      	ldr	r3, [pc, #12]	; (80003c0 <HAL_IncTick+0x14>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	440b      	add	r3, r1
 80003b6:	6013      	str	r3, [r2, #0]
}
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	200001fc 	.word	0x200001fc
 80003c0:	20000004 	.word	0x20000004

080003c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80003c4:	4b01      	ldr	r3, [pc, #4]	; (80003cc <HAL_GetTick+0x8>)
 80003c6:	6818      	ldr	r0, [r3, #0]
}
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	200001fc 	.word	0x200001fc

080003d0 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80003d0:	b530      	push	{r4, r5, lr}
 80003d2:	b083      	sub	sp, #12
 80003d4:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80003d6:	f7ff fff5 	bl	80003c4 <HAL_GetTick>
 80003da:	4605      	mov	r5, r0
  uint32_t wait = Delay;
 80003dc:	9c01      	ldr	r4, [sp, #4]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003de:	f1b4 3fff 	cmp.w	r4, #4294967295
 80003e2:	d002      	beq.n	80003ea <HAL_Delay+0x1a>
  {
    wait += (uint32_t)(uwTickFreq);
 80003e4:	4b04      	ldr	r3, [pc, #16]	; (80003f8 <HAL_Delay+0x28>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80003ea:	f7ff ffeb 	bl	80003c4 <HAL_GetTick>
 80003ee:	1b40      	subs	r0, r0, r5
 80003f0:	42a0      	cmp	r0, r4
 80003f2:	d3fa      	bcc.n	80003ea <HAL_Delay+0x1a>
  {
  }
}
 80003f4:	b003      	add	sp, #12
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	20000004 	.word	0x20000004

080003fc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003fc:	4907      	ldr	r1, [pc, #28]	; (800041c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80003fe:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000400:	0203      	lsls	r3, r0, #8
 8000402:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000406:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800040a:	0412      	lsls	r2, r2, #16
 800040c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800040e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000410:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000418:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800041a:	4770      	bx	lr
 800041c:	e000ed00 	.word	0xe000ed00

08000420 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000420:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000422:	4b18      	ldr	r3, [pc, #96]	; (8000484 <HAL_NVIC_SetPriority+0x64>)
 8000424:	68db      	ldr	r3, [r3, #12]
 8000426:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800042a:	f1c3 0c07 	rsb	ip, r3, #7
 800042e:	f1bc 0f04 	cmp.w	ip, #4
 8000432:	bf28      	it	cs
 8000434:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000438:	f103 0e04 	add.w	lr, r3, #4
 800043c:	f1be 0f06 	cmp.w	lr, #6
 8000440:	bf8c      	ite	hi
 8000442:	3b03      	subhi	r3, #3
 8000444:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000446:	f04f 3eff 	mov.w	lr, #4294967295
 800044a:	fa0e fc0c 	lsl.w	ip, lr, ip
 800044e:	ea21 010c 	bic.w	r1, r1, ip
 8000452:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000454:	fa0e f303 	lsl.w	r3, lr, r3
 8000458:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800045c:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 800045e:	2800      	cmp	r0, #0
 8000460:	db09      	blt.n	8000476 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000462:	0109      	lsls	r1, r1, #4
 8000464:	b2c9      	uxtb	r1, r1
 8000466:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800046a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800046e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000472:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000476:	f000 000f 	and.w	r0, r0, #15
 800047a:	0109      	lsls	r1, r1, #4
 800047c:	b2c9      	uxtb	r1, r1
 800047e:	4b02      	ldr	r3, [pc, #8]	; (8000488 <HAL_NVIC_SetPriority+0x68>)
 8000480:	5419      	strb	r1, [r3, r0]
 8000482:	e7f6      	b.n	8000472 <HAL_NVIC_SetPriority+0x52>
 8000484:	e000ed00 	.word	0xe000ed00
 8000488:	e000ed14 	.word	0xe000ed14

0800048c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800048c:	2800      	cmp	r0, #0
 800048e:	db08      	blt.n	80004a2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000490:	0942      	lsrs	r2, r0, #5
 8000492:	f000 001f 	and.w	r0, r0, #31
 8000496:	2301      	movs	r3, #1
 8000498:	fa03 f000 	lsl.w	r0, r3, r0
 800049c:	4b01      	ldr	r3, [pc, #4]	; (80004a4 <HAL_NVIC_EnableIRQ+0x18>)
 800049e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80004a2:	4770      	bx	lr
 80004a4:	e000e100 	.word	0xe000e100

080004a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004a8:	3801      	subs	r0, #1
 80004aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80004ae:	d20b      	bcs.n	80004c8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004b0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80004b4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b6:	4a05      	ldr	r2, [pc, #20]	; (80004cc <HAL_SYSTICK_Config+0x24>)
 80004b8:	21f0      	movs	r1, #240	; 0xf0
 80004ba:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004be:	2000      	movs	r0, #0
 80004c0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004c2:	2207      	movs	r2, #7
 80004c4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004c6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80004c8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80004ca:	4770      	bx	lr
 80004cc:	e000ed00 	.word	0xe000ed00

080004d0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004d0:	680b      	ldr	r3, [r1, #0]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	f000 8109 	beq.w	80006ea <HAL_GPIO_Init+0x21a>
{
 80004d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004dc:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004de:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00u;
 80004e2:	4662      	mov	r2, ip
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004e4:	4d81      	ldr	r5, [pc, #516]	; (80006ec <HAL_GPIO_Init+0x21c>)

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80004e6:	4e82      	ldr	r6, [pc, #520]	; (80006f0 <HAL_GPIO_Init+0x220>)
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80004e8:	4c82      	ldr	r4, [pc, #520]	; (80006f4 <HAL_GPIO_Init+0x224>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80004ea:	4f83      	ldr	r7, [pc, #524]	; (80006f8 <HAL_GPIO_Init+0x228>)
 80004ec:	f8df 820c 	ldr.w	r8, [pc, #524]	; 80006fc <HAL_GPIO_Init+0x22c>
 80004f0:	e055      	b.n	800059e <HAL_GPIO_Init+0xce>
        temp = GPIOx->OSPEEDR;
 80004f2:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80004f4:	f04f 0a03 	mov.w	sl, #3
 80004f8:	fa0a fa0c 	lsl.w	sl, sl, ip
 80004fc:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000500:	68cb      	ldr	r3, [r1, #12]
 8000502:	fa03 f30c 	lsl.w	r3, r3, ip
 8000506:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 800050a:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 800050c:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800050e:	ea23 0e0e 	bic.w	lr, r3, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000512:	684b      	ldr	r3, [r1, #4]
 8000514:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000518:	4093      	lsls	r3, r2
 800051a:	ea43 030e 	orr.w	r3, r3, lr
        GPIOx->OTYPER = temp;
 800051e:	6043      	str	r3, [r0, #4]
 8000520:	e04a      	b.n	80005b8 <HAL_GPIO_Init+0xe8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000522:	f04f 0e00 	mov.w	lr, #0
 8000526:	fa0e fe0b 	lsl.w	lr, lr, fp
 800052a:	ea4e 0e0a 	orr.w	lr, lr, sl
        SYSCFG->EXTICR[position >> 2u] = temp;
 800052e:	f8c3 e008 	str.w	lr, [r3, #8]
        temp = EXTI->IMR;
 8000532:	6823      	ldr	r3, [r4, #0]
        temp &= ~(iocurrent);
 8000534:	ea6f 0e09 	mvn.w	lr, r9
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000538:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800053c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000540:	bf0c      	ite	eq
 8000542:	ea0e 0303 	andeq.w	r3, lr, r3
        {
          temp |= iocurrent;
 8000546:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->IMR = temp;
 800054a:	6023      	str	r3, [r4, #0]

        temp = EXTI->EMR;
 800054c:	6863      	ldr	r3, [r4, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800054e:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000552:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000556:	bf0c      	ite	eq
 8000558:	ea0e 0303 	andeq.w	r3, lr, r3
        {
          temp |= iocurrent;
 800055c:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->EMR = temp;
 8000560:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000562:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000564:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000568:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800056c:	bf0c      	ite	eq
 800056e:	ea0e 0303 	andeq.w	r3, lr, r3
        {
          temp |= iocurrent;
 8000572:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->RTSR = temp;
 8000576:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR;
 8000578:	68e3      	ldr	r3, [r4, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800057a:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800057e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8000582:	bf0c      	ite	eq
 8000584:	ea0e 0303 	andeq.w	r3, lr, r3
        {
          temp |= iocurrent;
 8000588:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->FTSR = temp;
 800058c:	60e3      	str	r3, [r4, #12]
      }
    }

    position++;
 800058e:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000590:	680b      	ldr	r3, [r1, #0]
 8000592:	f10c 0c02 	add.w	ip, ip, #2
 8000596:	fa33 fe02 	lsrs.w	lr, r3, r2
 800059a:	f000 80a3 	beq.w	80006e4 <HAL_GPIO_Init+0x214>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800059e:	f04f 0e01 	mov.w	lr, #1
 80005a2:	fa0e fe02 	lsl.w	lr, lr, r2
    if (iocurrent != 0x00u)
 80005a6:	ea1e 0903 	ands.w	r9, lr, r3
 80005aa:	d0f0      	beq.n	800058e <HAL_GPIO_Init+0xbe>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80005ac:	684b      	ldr	r3, [r1, #4]
 80005ae:	f003 0303 	and.w	r3, r3, #3
 80005b2:	3b01      	subs	r3, #1
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d99c      	bls.n	80004f2 <HAL_GPIO_Init+0x22>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80005b8:	684b      	ldr	r3, [r1, #4]
 80005ba:	f003 0303 	and.w	r3, r3, #3
 80005be:	2b03      	cmp	r3, #3
 80005c0:	d027      	beq.n	8000612 <HAL_GPIO_Init+0x142>
        temp = GPIOx->PUPDR;
 80005c2:	68c3      	ldr	r3, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80005c4:	f04f 0e03 	mov.w	lr, #3
 80005c8:	fa0e fe0c 	lsl.w	lr, lr, ip
 80005cc:	ea23 0e0e 	bic.w	lr, r3, lr
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80005d0:	688b      	ldr	r3, [r1, #8]
 80005d2:	fa03 f30c 	lsl.w	r3, r3, ip
 80005d6:	ea43 030e 	orr.w	r3, r3, lr
        GPIOx->PUPDR = temp;
 80005da:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80005dc:	684b      	ldr	r3, [r1, #4]
 80005de:	f003 0303 	and.w	r3, r3, #3
 80005e2:	2b02      	cmp	r3, #2
 80005e4:	d115      	bne.n	8000612 <HAL_GPIO_Init+0x142>
        temp = GPIOx->AFR[position >> 3u];
 80005e6:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
 80005ea:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80005ee:	f8de a020 	ldr.w	sl, [lr, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80005f2:	f002 0307 	and.w	r3, r2, #7
 80005f6:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 80005fa:	230f      	movs	r3, #15
 80005fc:	fa03 f30b 	lsl.w	r3, r3, fp
 8000600:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000604:	690b      	ldr	r3, [r1, #16]
 8000606:	fa03 f30b 	lsl.w	r3, r3, fp
 800060a:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3u] = temp;
 800060e:	f8ce 3020 	str.w	r3, [lr, #32]
      temp = GPIOx->MODER;
 8000612:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000614:	f04f 0e03 	mov.w	lr, #3
 8000618:	fa0e fe0c 	lsl.w	lr, lr, ip
 800061c:	ea23 0e0e 	bic.w	lr, r3, lr
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000620:	684b      	ldr	r3, [r1, #4]
 8000622:	f003 0303 	and.w	r3, r3, #3
 8000626:	fa03 f30c 	lsl.w	r3, r3, ip
 800062a:	ea43 030e 	orr.w	r3, r3, lr
      GPIOx->MODER = temp;
 800062e:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000630:	684b      	ldr	r3, [r1, #4]
 8000632:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8000636:	d0aa      	beq.n	800058e <HAL_GPIO_Init+0xbe>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800063e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000642:	646b      	str	r3, [r5, #68]	; 0x44
 8000644:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800064a:	9301      	str	r3, [sp, #4]
 800064c:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800064e:	f022 0303 	bic.w	r3, r2, #3
 8000652:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000656:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800065a:	f8d3 a008 	ldr.w	sl, [r3, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800065e:	f002 0e03 	and.w	lr, r2, #3
 8000662:	ea4f 0b8e 	mov.w	fp, lr, lsl #2
 8000666:	f04f 0e0f 	mov.w	lr, #15
 800066a:	fa0e fe0b 	lsl.w	lr, lr, fp
 800066e:	ea2a 0a0e 	bic.w	sl, sl, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000672:	42b0      	cmp	r0, r6
 8000674:	f43f af55 	beq.w	8000522 <HAL_GPIO_Init+0x52>
 8000678:	42b8      	cmp	r0, r7
 800067a:	d01e      	beq.n	80006ba <HAL_GPIO_Init+0x1ea>
 800067c:	4540      	cmp	r0, r8
 800067e:	d01f      	beq.n	80006c0 <HAL_GPIO_Init+0x1f0>
 8000680:	f8df e07c 	ldr.w	lr, [pc, #124]	; 8000700 <HAL_GPIO_Init+0x230>
 8000684:	4570      	cmp	r0, lr
 8000686:	d01e      	beq.n	80006c6 <HAL_GPIO_Init+0x1f6>
 8000688:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 800068c:	4570      	cmp	r0, lr
 800068e:	d01d      	beq.n	80006cc <HAL_GPIO_Init+0x1fc>
 8000690:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8000694:	4570      	cmp	r0, lr
 8000696:	d01c      	beq.n	80006d2 <HAL_GPIO_Init+0x202>
 8000698:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 800069c:	4570      	cmp	r0, lr
 800069e:	d01b      	beq.n	80006d8 <HAL_GPIO_Init+0x208>
 80006a0:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 80006a4:	4570      	cmp	r0, lr
 80006a6:	d01a      	beq.n	80006de <HAL_GPIO_Init+0x20e>
 80006a8:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 80006ac:	4570      	cmp	r0, lr
 80006ae:	bf0c      	ite	eq
 80006b0:	f04f 0e08 	moveq.w	lr, #8
 80006b4:	f04f 0e09 	movne.w	lr, #9
 80006b8:	e735      	b.n	8000526 <HAL_GPIO_Init+0x56>
 80006ba:	f04f 0e01 	mov.w	lr, #1
 80006be:	e732      	b.n	8000526 <HAL_GPIO_Init+0x56>
 80006c0:	f04f 0e02 	mov.w	lr, #2
 80006c4:	e72f      	b.n	8000526 <HAL_GPIO_Init+0x56>
 80006c6:	f04f 0e03 	mov.w	lr, #3
 80006ca:	e72c      	b.n	8000526 <HAL_GPIO_Init+0x56>
 80006cc:	f04f 0e04 	mov.w	lr, #4
 80006d0:	e729      	b.n	8000526 <HAL_GPIO_Init+0x56>
 80006d2:	f04f 0e05 	mov.w	lr, #5
 80006d6:	e726      	b.n	8000526 <HAL_GPIO_Init+0x56>
 80006d8:	f04f 0e06 	mov.w	lr, #6
 80006dc:	e723      	b.n	8000526 <HAL_GPIO_Init+0x56>
 80006de:	f04f 0e07 	mov.w	lr, #7
 80006e2:	e720      	b.n	8000526 <HAL_GPIO_Init+0x56>
  }
}
 80006e4:	b003      	add	sp, #12
 80006e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006ea:	4770      	bx	lr
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40020000 	.word	0x40020000
 80006f4:	40013c00 	.word	0x40013c00
 80006f8:	40020400 	.word	0x40020400
 80006fc:	40020800 	.word	0x40020800
 8000700:	40020c00 	.word	0x40020c00

08000704 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000704:	b570      	push	{r4, r5, r6, lr}
 8000706:	b08a      	sub	sp, #40	; 0x28
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000708:	2800      	cmp	r0, #0
 800070a:	f000 8090 	beq.w	800082e <HAL_PCD_Init+0x12a>
 800070e:	4605      	mov	r5, r0
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000710:	6804      	ldr	r4, [r0, #0]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000712:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8000716:	b33b      	cbz	r3, 8000768 <HAL_PCD_Init+0x64>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000718:	2303      	movs	r3, #3
 800071a:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800071e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000720:	f413 7f80 	tst.w	r3, #256	; 0x100
  {
    hpcd->Init.dma_enable = 0U;
 8000724:	bf04      	itt	eq
 8000726:	2300      	moveq	r3, #0
 8000728:	612b      	streq	r3, [r5, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800072a:	6828      	ldr	r0, [r5, #0]
 800072c:	f000 fe0e 	bl	800134c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000730:	462c      	mov	r4, r5
 8000732:	f854 6b10 	ldr.w	r6, [r4], #16
 8000736:	46ec      	mov	ip, sp
 8000738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800073a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800073e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000740:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000744:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000748:	e88c 0003 	stmia.w	ip, {r0, r1}
 800074c:	1d2b      	adds	r3, r5, #4
 800074e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000750:	4630      	mov	r0, r6
 8000752:	f000 fd45 	bl	80011e0 <USB_CoreInit>
 8000756:	4604      	mov	r4, r0
 8000758:	b158      	cbz	r0, 8000772 <HAL_PCD_Init+0x6e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800075a:	2302      	movs	r3, #2
 800075c:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 8000760:	2401      	movs	r4, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8000762:	4620      	mov	r0, r4
 8000764:	b00a      	add	sp, #40	; 0x28
 8000766:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8000768:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 800076c:	f002 f9ac 	bl	8002ac8 <HAL_PCD_MspInit>
 8000770:	e7d2      	b.n	8000718 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000772:	2100      	movs	r1, #0
 8000774:	6828      	ldr	r0, [r5, #0]
 8000776:	f000 fdef 	bl	8001358 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800077a:	6868      	ldr	r0, [r5, #4]
 800077c:	b398      	cbz	r0, 80007e6 <HAL_PCD_Init+0xe2>
 800077e:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 8000780:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000784:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 8000786:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800078a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800078e:	f882 c03d 	strb.w	ip, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8000792:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000796:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800079a:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 800079e:	6451      	str	r1, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 80007a0:	6491      	str	r1, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 80007a2:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80007a6:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80007aa:	6511      	str	r1, [r2, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007ac:	3301      	adds	r3, #1
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	4283      	cmp	r3, r0
 80007b2:	d3e8      	bcc.n	8000786 <HAL_PCD_Init+0x82>
    hpcd->OUT_ep[i].is_in = 0U;
 80007b4:	2200      	movs	r2, #0
 80007b6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 80007ba:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80007be:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80007c2:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80007c6:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80007ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80007ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80007d2:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 80007d6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80007da:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007de:	3401      	adds	r4, #1
 80007e0:	b2e4      	uxtb	r4, r4
 80007e2:	4284      	cmp	r4, r0
 80007e4:	d3e7      	bcc.n	80007b6 <HAL_PCD_Init+0xb2>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80007e6:	462c      	mov	r4, r5
 80007e8:	f854 6b10 	ldr.w	r6, [r4], #16
 80007ec:	46ec      	mov	ip, sp
 80007ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80007f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80007fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80007fe:	e88c 0003 	stmia.w	ip, {r0, r1}
 8000802:	1d2b      	adds	r3, r5, #4
 8000804:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000806:	4630      	mov	r0, r6
 8000808:	f000 fe02 	bl	8001410 <USB_DevInit>
 800080c:	4604      	mov	r4, r0
 800080e:	b120      	cbz	r0, 800081a <HAL_PCD_Init+0x116>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000810:	2302      	movs	r3, #2
 8000812:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 8000816:	2401      	movs	r4, #1
 8000818:	e7a3      	b.n	8000762 <HAL_PCD_Init+0x5e>
  hpcd->USB_Address = 0U;
 800081a:	2300      	movs	r3, #0
 800081c:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000820:	2301      	movs	r3, #1
 8000822:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8000826:	6828      	ldr	r0, [r5, #0]
 8000828:	f001 f9d0 	bl	8001bcc <USB_DevDisconnect>
  return HAL_OK;
 800082c:	e799      	b.n	8000762 <HAL_PCD_Init+0x5e>
    return HAL_ERROR;
 800082e:	2401      	movs	r4, #1
 8000830:	e797      	b.n	8000762 <HAL_PCD_Init+0x5e>

08000832 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8000832:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8000836:	2b01      	cmp	r3, #1
 8000838:	d00e      	beq.n	8000858 <HAL_PCD_Start+0x26>
{
 800083a:	b510      	push	{r4, lr}
 800083c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800083e:	2301      	movs	r3, #1
 8000840:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8000844:	6800      	ldr	r0, [r0, #0]
 8000846:	f000 fd7b 	bl	8001340 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800084a:	6820      	ldr	r0, [r4, #0]
 800084c:	f001 f9b0 	bl	8001bb0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000850:	2000      	movs	r0, #0
 8000852:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
}
 8000856:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000858:	2002      	movs	r0, #2
}
 800085a:	4770      	bx	lr

0800085c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800085c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000860:	b089      	sub	sp, #36	; 0x24
 8000862:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000864:	6806      	ldr	r6, [r0, #0]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000866:	4630      	mov	r0, r6
 8000868:	f001 f9ee 	bl	8001c48 <USB_GetMode>
 800086c:	b110      	cbz	r0, 8000874 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 800086e:	b009      	add	sp, #36	; 0x24
 8000870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000874:	4683      	mov	fp, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000876:	6820      	ldr	r0, [r4, #0]
 8000878:	f001 f9b6 	bl	8001be8 <USB_ReadInterrupts>
 800087c:	2800      	cmp	r0, #0
 800087e:	d0f6      	beq.n	800086e <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000880:	6820      	ldr	r0, [r4, #0]
 8000882:	f001 f9b1 	bl	8001be8 <USB_ReadInterrupts>
 8000886:	f010 0f02 	tst.w	r0, #2
 800088a:	d004      	beq.n	8000896 <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800088c:	6822      	ldr	r2, [r4, #0]
 800088e:	6953      	ldr	r3, [r2, #20]
 8000890:	f003 0302 	and.w	r3, r3, #2
 8000894:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000896:	6820      	ldr	r0, [r4, #0]
 8000898:	f001 f9a6 	bl	8001be8 <USB_ReadInterrupts>
 800089c:	f010 0f10 	tst.w	r0, #16
 80008a0:	d013      	beq.n	80008ca <HAL_PCD_IRQHandler+0x6e>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80008a2:	6822      	ldr	r2, [r4, #0]
 80008a4:	6993      	ldr	r3, [r2, #24]
 80008a6:	f023 0310 	bic.w	r3, r3, #16
 80008aa:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 80008ac:	6a35      	ldr	r5, [r6, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80008ae:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80008b2:	f3c5 4343 	ubfx	r3, r5, #17, #4
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d068      	beq.n	800098c <HAL_PCD_IRQHandler+0x130>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80008ba:	2b06      	cmp	r3, #6
 80008bc:	f000 8084 	beq.w	80009c8 <HAL_PCD_IRQHandler+0x16c>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80008c0:	6822      	ldr	r2, [r4, #0]
 80008c2:	6993      	ldr	r3, [r2, #24]
 80008c4:	f043 0310 	orr.w	r3, r3, #16
 80008c8:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80008ca:	6820      	ldr	r0, [r4, #0]
 80008cc:	f001 f98c 	bl	8001be8 <USB_ReadInterrupts>
 80008d0:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 80008d4:	f040 808a 	bne.w	80009ec <HAL_PCD_IRQHandler+0x190>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80008d8:	6820      	ldr	r0, [r4, #0]
 80008da:	f001 f985 	bl	8001be8 <USB_ReadInterrupts>
 80008de:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 80008e2:	f040 8106 	bne.w	8000af2 <HAL_PCD_IRQHandler+0x296>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80008e6:	6820      	ldr	r0, [r4, #0]
 80008e8:	f001 f97e 	bl	8001be8 <USB_ReadInterrupts>
 80008ec:	2800      	cmp	r0, #0
 80008ee:	f2c0 81c2 	blt.w	8000c76 <HAL_PCD_IRQHandler+0x41a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80008f2:	6820      	ldr	r0, [r4, #0]
 80008f4:	f001 f978 	bl	8001be8 <USB_ReadInterrupts>
 80008f8:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80008fc:	d00a      	beq.n	8000914 <HAL_PCD_IRQHandler+0xb8>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80008fe:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 8000902:	f013 0f01 	tst.w	r3, #1
 8000906:	f040 81c5 	bne.w	8000c94 <HAL_PCD_IRQHandler+0x438>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800090a:	6822      	ldr	r2, [r4, #0]
 800090c:	6953      	ldr	r3, [r2, #20]
 800090e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000912:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8000914:	6820      	ldr	r0, [r4, #0]
 8000916:	f001 f967 	bl	8001be8 <USB_ReadInterrupts>
 800091a:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 800091e:	f040 81c1 	bne.w	8000ca4 <HAL_PCD_IRQHandler+0x448>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8000922:	6820      	ldr	r0, [r4, #0]
 8000924:	f001 f960 	bl	8001be8 <USB_ReadInterrupts>
 8000928:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 800092c:	f040 8214 	bne.w	8000d58 <HAL_PCD_IRQHandler+0x4fc>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8000930:	6820      	ldr	r0, [r4, #0]
 8000932:	f001 f959 	bl	8001be8 <USB_ReadInterrupts>
 8000936:	f010 0f08 	tst.w	r0, #8
 800093a:	f040 8225 	bne.w	8000d88 <HAL_PCD_IRQHandler+0x52c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800093e:	6820      	ldr	r0, [r4, #0]
 8000940:	f001 f952 	bl	8001be8 <USB_ReadInterrupts>
 8000944:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8000948:	f040 8227 	bne.w	8000d9a <HAL_PCD_IRQHandler+0x53e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800094c:	6820      	ldr	r0, [r4, #0]
 800094e:	f001 f94b 	bl	8001be8 <USB_ReadInterrupts>
 8000952:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8000956:	f040 822a 	bne.w	8000dae <HAL_PCD_IRQHandler+0x552>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800095a:	6820      	ldr	r0, [r4, #0]
 800095c:	f001 f944 	bl	8001be8 <USB_ReadInterrupts>
 8000960:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8000964:	f040 822d 	bne.w	8000dc2 <HAL_PCD_IRQHandler+0x566>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8000968:	6820      	ldr	r0, [r4, #0]
 800096a:	f001 f93d 	bl	8001be8 <USB_ReadInterrupts>
 800096e:	f010 0f04 	tst.w	r0, #4
 8000972:	f43f af7c 	beq.w	800086e <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8000976:	6823      	ldr	r3, [r4, #0]
 8000978:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800097a:	f015 0f04 	tst.w	r5, #4
 800097e:	f040 8229 	bne.w	8000dd4 <HAL_PCD_IRQHandler+0x578>
      hpcd->Instance->GOTGINT |= temp;
 8000982:	6822      	ldr	r2, [r4, #0]
 8000984:	6853      	ldr	r3, [r2, #4]
 8000986:	432b      	orrs	r3, r5
 8000988:	6053      	str	r3, [r2, #4]
 800098a:	e770      	b.n	800086e <HAL_PCD_IRQHandler+0x12>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800098c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000990:	421d      	tst	r5, r3
 8000992:	d095      	beq.n	80008c0 <HAL_PCD_IRQHandler+0x64>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000994:	ea4f 1a15 	mov.w	sl, r5, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000998:	ebc7 08c7 	rsb	r8, r7, r7, lsl #3
 800099c:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 80009a0:	f3c5 120a 	ubfx	r2, r5, #4, #11
 80009a4:	f8d8 1208 	ldr.w	r1, [r8, #520]	; 0x208
 80009a8:	4630      	mov	r0, r6
 80009aa:	f001 f871 	bl	8001a90 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80009ae:	f3ca 020a 	ubfx	r2, sl, #0, #11
 80009b2:	f8d8 3208 	ldr.w	r3, [r8, #520]	; 0x208
 80009b6:	4413      	add	r3, r2
 80009b8:	f8c8 3208 	str.w	r3, [r8, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80009bc:	f8d8 3214 	ldr.w	r3, [r8, #532]	; 0x214
 80009c0:	441a      	add	r2, r3
 80009c2:	f8c8 2214 	str.w	r2, [r8, #532]	; 0x214
 80009c6:	e77b      	b.n	80008c0 <HAL_PCD_IRQHandler+0x64>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80009c8:	2208      	movs	r2, #8
 80009ca:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80009ce:	4630      	mov	r0, r6
 80009d0:	f001 f85e 	bl	8001a90 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80009d4:	ebc7 01c7 	rsb	r1, r7, r7, lsl #3
 80009d8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80009dc:	f3c5 130a 	ubfx	r3, r5, #4, #11
 80009e0:	f8d1 2214 	ldr.w	r2, [r1, #532]	; 0x214
 80009e4:	4413      	add	r3, r2
 80009e6:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
 80009ea:	e769      	b.n	80008c0 <HAL_PCD_IRQHandler+0x64>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80009ec:	6820      	ldr	r0, [r4, #0]
 80009ee:	f001 f8ff 	bl	8001bf0 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 80009f2:	4605      	mov	r5, r0
 80009f4:	2800      	cmp	r0, #0
 80009f6:	f43f af6f 	beq.w	80008d8 <HAL_PCD_IRQHandler+0x7c>
 80009fa:	f506 6730 	add.w	r7, r6, #2816	; 0xb00
 80009fe:	46a2      	mov	sl, r4
      epnum = 0U;
 8000a00:	46d8      	mov	r8, fp
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8000a02:	9603      	str	r6, [sp, #12]
 8000a04:	e205      	b.n	8000e12 <HAL_PCD_IRQHandler+0x5b6>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000a06:	2301      	movs	r3, #1
 8000a08:	60bb      	str	r3, [r7, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000a0a:	6820      	ldr	r0, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8000a0c:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8000a10:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8000a14:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8000a18:	689a      	ldr	r2, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 8000a1a:	6921      	ldr	r1, [r4, #16]
 8000a1c:	2901      	cmp	r1, #1
 8000a1e:	d00e      	beq.n	8000a3e <HAL_PCD_IRQHandler+0x1e2>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8000a20:	499e      	ldr	r1, [pc, #632]	; (8000c9c <HAL_PCD_IRQHandler+0x440>)
 8000a22:	458c      	cmp	ip, r1
 8000a24:	d04c      	beq.n	8000ac0 <HAL_PCD_IRQHandler+0x264>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8000a26:	f1b8 0f00 	cmp.w	r8, #0
 8000a2a:	d103      	bne.n	8000a34 <HAL_PCD_IRQHandler+0x1d8>
 8000a2c:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d056      	beq.n	8000ae2 <HAL_PCD_IRQHandler+0x286>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8000a34:	4649      	mov	r1, r9
 8000a36:	4620      	mov	r0, r4
 8000a38:	f002 f890 	bl	8002b5c <HAL_PCD_DataOutStageCallback>
 8000a3c:	e1f7      	b.n	8000e2e <HAL_PCD_IRQHandler+0x5d2>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8000a3e:	f012 0f08 	tst.w	r2, #8
 8000a42:	d00b      	beq.n	8000a5c <HAL_PCD_IRQHandler+0x200>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8000a44:	4996      	ldr	r1, [pc, #600]	; (8000ca0 <HAL_PCD_IRQHandler+0x444>)
 8000a46:	458c      	cmp	ip, r1
 8000a48:	f240 81f1 	bls.w	8000e2e <HAL_PCD_IRQHandler+0x5d2>
 8000a4c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8000a50:	f000 81ed 	beq.w	8000e2e <HAL_PCD_IRQHandler+0x5d2>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8000a54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	e1e8      	b.n	8000e2e <HAL_PCD_IRQHandler+0x5d2>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8000a5c:	f012 0f20 	tst.w	r2, #32
 8000a60:	d002      	beq.n	8000a68 <HAL_PCD_IRQHandler+0x20c>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000a62:	2220      	movs	r2, #32
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	e1e2      	b.n	8000e2e <HAL_PCD_IRQHandler+0x5d2>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8000a68:	f012 0f28 	tst.w	r2, #40	; 0x28
 8000a6c:	f040 81df 	bne.w	8000e2e <HAL_PCD_IRQHandler+0x5d2>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8000a70:	498b      	ldr	r1, [pc, #556]	; (8000ca0 <HAL_PCD_IRQHandler+0x444>)
 8000a72:	458c      	cmp	ip, r1
 8000a74:	d906      	bls.n	8000a84 <HAL_PCD_IRQHandler+0x228>
 8000a76:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8000a7a:	d003      	beq.n	8000a84 <HAL_PCD_IRQHandler+0x228>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8000a7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	e1d4      	b.n	8000e2e <HAL_PCD_IRQHandler+0x5d2>
          hpcd->OUT_ep[epnum].maxpacket -
 8000a84:	f8da 2204 	ldr.w	r2, [sl, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8000a88:	691b      	ldr	r3, [r3, #16]
 8000a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8000a8e:	1ad3      	subs	r3, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8000a90:	f8ca 3214 	str.w	r3, [sl, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8000a94:	f8da 3208 	ldr.w	r3, [sl, #520]	; 0x208
 8000a98:	4413      	add	r3, r2
 8000a9a:	f8ca 3208 	str.w	r3, [sl, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8000a9e:	f1b8 0f00 	cmp.w	r8, #0
 8000aa2:	d102      	bne.n	8000aaa <HAL_PCD_IRQHandler+0x24e>
 8000aa4:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8000aa8:	b123      	cbz	r3, 8000ab4 <HAL_PCD_IRQHandler+0x258>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8000aaa:	4649      	mov	r1, r9
 8000aac:	4620      	mov	r0, r4
 8000aae:	f002 f855 	bl	8002b5c <HAL_PCD_DataOutStageCallback>
 8000ab2:	e1bc      	b.n	8000e2e <HAL_PCD_IRQHandler+0x5d2>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000ab4:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8000ab8:	2101      	movs	r1, #1
 8000aba:	f001 f8d9 	bl	8001c70 <USB_EP0_OutStart>
 8000abe:	e7f4      	b.n	8000aaa <HAL_PCD_IRQHandler+0x24e>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8000ac0:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8000ac4:	d003      	beq.n	8000ace <HAL_PCD_IRQHandler+0x272>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8000ac6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	e1af      	b.n	8000e2e <HAL_PCD_IRQHandler+0x5d2>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000ace:	f012 0f20 	tst.w	r2, #32
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000ad2:	bf1c      	itt	ne
 8000ad4:	2220      	movne	r2, #32
 8000ad6:	609a      	strne	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8000ad8:	4649      	mov	r1, r9
 8000ada:	4620      	mov	r0, r4
 8000adc:	f002 f83e 	bl	8002b5c <HAL_PCD_DataOutStageCallback>
 8000ae0:	e1a5      	b.n	8000e2e <HAL_PCD_IRQHandler+0x5d2>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8000ae2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	f001 f8c2 	bl	8001c70 <USB_EP0_OutStart>
 8000aec:	e7a2      	b.n	8000a34 <HAL_PCD_IRQHandler+0x1d8>
 8000aee:	9e03      	ldr	r6, [sp, #12]
 8000af0:	e6f2      	b.n	80008d8 <HAL_PCD_IRQHandler+0x7c>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000af2:	6820      	ldr	r0, [r4, #0]
 8000af4:	f001 f884 	bl	8001c00 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 8000af8:	4680      	mov	r8, r0
 8000afa:	2800      	cmp	r0, #0
 8000afc:	f43f aef3 	beq.w	80008e6 <HAL_PCD_IRQHandler+0x8a>
 8000b00:	46a2      	mov	sl, r4
 8000b02:	f506 6910 	add.w	r9, r6, #2304	; 0x900
      epnum = 0U;
 8000b06:	465f      	mov	r7, fp
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8000b08:	9603      	str	r6, [sp, #12]
 8000b0a:	f8cd b010 	str.w	fp, [sp, #16]
 8000b0e:	e02d      	b.n	8000b6c <HAL_PCD_IRQHandler+0x310>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000b10:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8000b14:	4601      	mov	r1, r0
 8000b16:	6820      	ldr	r0, [r4, #0]
 8000b18:	f001 f8aa 	bl	8001c70 <USB_EP0_OutStart>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8000b1c:	4659      	mov	r1, fp
 8000b1e:	4620      	mov	r0, r4
 8000b20:	f002 f828 	bl	8002b74 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8000b24:	f015 0f08 	tst.w	r5, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8000b28:	bf1c      	itt	ne
 8000b2a:	2308      	movne	r3, #8
 8000b2c:	f8c9 3008 	strne.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8000b30:	f015 0f10 	tst.w	r5, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8000b34:	bf1c      	itt	ne
 8000b36:	2310      	movne	r3, #16
 8000b38:	f8c9 3008 	strne.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8000b3c:	f015 0f40 	tst.w	r5, #64	; 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8000b40:	bf1c      	itt	ne
 8000b42:	2340      	movne	r3, #64	; 0x40
 8000b44:	f8c9 3008 	strne.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8000b48:	f015 0f02 	tst.w	r5, #2
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8000b4c:	bf1c      	itt	ne
 8000b4e:	2302      	movne	r3, #2
 8000b50:	f8c9 3008 	strne.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8000b54:	f015 0f80 	tst.w	r5, #128	; 0x80
 8000b58:	d134      	bne.n	8000bc4 <HAL_PCD_IRQHandler+0x368>
        epnum++;
 8000b5a:	3701      	adds	r7, #1
      while (ep_intr != 0U)
 8000b5c:	f10a 0a1c 	add.w	sl, sl, #28
 8000b60:	f109 0920 	add.w	r9, r9, #32
 8000b64:	ea5f 0858 	movs.w	r8, r8, lsr #1
 8000b68:	f000 8081 	beq.w	8000c6e <HAL_PCD_IRQHandler+0x412>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8000b6c:	f018 0f01 	tst.w	r8, #1
 8000b70:	d0f3      	beq.n	8000b5a <HAL_PCD_IRQHandler+0x2fe>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000b72:	fa5f fb87 	uxtb.w	fp, r7
 8000b76:	4659      	mov	r1, fp
 8000b78:	6820      	ldr	r0, [r4, #0]
 8000b7a:	f001 f852 	bl	8001c22 <USB_ReadDevInEPInterrupt>
 8000b7e:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000b80:	f010 0f01 	tst.w	r0, #1
 8000b84:	d0ce      	beq.n	8000b24 <HAL_PCD_IRQHandler+0x2c8>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000b86:	9b03      	ldr	r3, [sp, #12]
 8000b88:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 8000b8c:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000b90:	f007 020f 	and.w	r2, r7, #15
 8000b94:	2001      	movs	r0, #1
 8000b96:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000b9a:	ea23 0302 	bic.w	r3, r3, r2
 8000b9e:	634b      	str	r3, [r1, #52]	; 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000ba0:	f8c9 0008 	str.w	r0, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 8000ba4:	6923      	ldr	r3, [r4, #16]
 8000ba6:	4283      	cmp	r3, r0
 8000ba8:	d1b8      	bne.n	8000b1c <HAL_PCD_IRQHandler+0x2c0>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8000baa:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 8000bae:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 8000bb2:	4413      	add	r3, r2
 8000bb4:	f8ca 3048 	str.w	r3, [sl, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8000bb8:	2f00      	cmp	r7, #0
 8000bba:	d1af      	bne.n	8000b1c <HAL_PCD_IRQHandler+0x2c0>
 8000bbc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1ac      	bne.n	8000b1c <HAL_PCD_IRQHandler+0x2c0>
 8000bc2:	e7a5      	b.n	8000b10 <HAL_PCD_IRQHandler+0x2b4>
  if (ep->xfer_count > ep->xfer_len)
 8000bc4:	4656      	mov	r6, sl
 8000bc6:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 8000bca:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d8c3      	bhi.n	8000b5a <HAL_PCD_IRQHandler+0x2fe>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000bd2:	6821      	ldr	r1, [r4, #0]
 8000bd4:	9105      	str	r1, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 8000bd6:	1a9b      	subs	r3, r3, r2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000bd8:	f501 6210 	add.w	r2, r1, #2304	; 0x900
 8000bdc:	eb02 1247 	add.w	r2, r2, r7, lsl #5
 8000be0:	4610      	mov	r0, r2
 8000be2:	6992      	ldr	r2, [r2, #24]
  len32b = (len + 3U) / 4U;
 8000be4:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 8000be8:	428b      	cmp	r3, r1
 8000bea:	bf28      	it	cs
 8000bec:	460b      	movcs	r3, r1
 8000bee:	3303      	adds	r3, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000bf0:	b292      	uxth	r2, r2
 8000bf2:	ebb2 0f93 	cmp.w	r2, r3, lsr #2
 8000bf6:	d325      	bcc.n	8000c44 <HAL_PCD_IRQHandler+0x3e8>
 8000bf8:	f8cd a018 	str.w	sl, [sp, #24]
 8000bfc:	4682      	mov	sl, r0
 8000bfe:	9707      	str	r7, [sp, #28]
 8000c00:	9f05      	ldr	r7, [sp, #20]
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8000c02:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8000c04:	6d35      	ldr	r5, [r6, #80]	; 0x50
 8000c06:	429d      	cmp	r5, r3
 8000c08:	d921      	bls.n	8000c4e <HAL_PCD_IRQHandler+0x3f2>
    len = ep->xfer_len - ep->xfer_count;
 8000c0a:	1aed      	subs	r5, r5, r3
    if (len > ep->maxpacket)
 8000c0c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000c0e:	429d      	cmp	r5, r3
 8000c10:	bf28      	it	cs
 8000c12:	461d      	movcs	r5, r3
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8000c14:	7c23      	ldrb	r3, [r4, #16]
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	b2ab      	uxth	r3, r5
 8000c1a:	465a      	mov	r2, fp
 8000c1c:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8000c1e:	4638      	mov	r0, r7
 8000c20:	f000 fe18 	bl	8001854 <USB_WritePacket>
    ep->xfer_buff  += len;
 8000c24:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8000c26:	442b      	add	r3, r5
 8000c28:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 8000c2a:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8000c2c:	442b      	add	r3, r5
 8000c2e:	6573      	str	r3, [r6, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000c30:	f8da 3018 	ldr.w	r3, [sl, #24]
    len32b = (len + 3U) / 4U;
 8000c34:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	ebb3 0f95 	cmp.w	r3, r5, lsr #2
 8000c3c:	d2e1      	bcs.n	8000c02 <HAL_PCD_IRQHandler+0x3a6>
 8000c3e:	f8dd a018 	ldr.w	sl, [sp, #24]
 8000c42:	9f07      	ldr	r7, [sp, #28]
  if (ep->xfer_len <= ep->xfer_count)
 8000c44:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8000c46:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d886      	bhi.n	8000b5a <HAL_PCD_IRQHandler+0x2fe>
 8000c4c:	e002      	b.n	8000c54 <HAL_PCD_IRQHandler+0x3f8>
 8000c4e:	f8dd a018 	ldr.w	sl, [sp, #24]
 8000c52:	9f07      	ldr	r7, [sp, #28]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000c54:	9b05      	ldr	r3, [sp, #20]
 8000c56:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000c5a:	f007 010f 	and.w	r1, r7, #15
 8000c5e:	2001      	movs	r0, #1
 8000c60:	fa00 f101 	lsl.w	r1, r0, r1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000c64:	ea22 0201 	bic.w	r2, r2, r1
 8000c68:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 8000c6c:	e775      	b.n	8000b5a <HAL_PCD_IRQHandler+0x2fe>
 8000c6e:	9e03      	ldr	r6, [sp, #12]
 8000c70:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000c74:	e637      	b.n	80008e6 <HAL_PCD_IRQHandler+0x8a>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000c76:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 8000c7a:	f023 0301 	bic.w	r3, r3, #1
 8000c7e:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
      HAL_PCD_ResumeCallback(hpcd);
 8000c82:	4620      	mov	r0, r4
 8000c84:	f001 ffb6 	bl	8002bf4 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8000c88:	6822      	ldr	r2, [r4, #0]
 8000c8a:	6953      	ldr	r3, [r2, #20]
 8000c8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000c90:	6153      	str	r3, [r2, #20]
 8000c92:	e62e      	b.n	80008f2 <HAL_PCD_IRQHandler+0x96>
        HAL_PCD_SuspendCallback(hpcd);
 8000c94:	4620      	mov	r0, r4
 8000c96:	f001 ff95 	bl	8002bc4 <HAL_PCD_SuspendCallback>
 8000c9a:	e636      	b.n	800090a <HAL_PCD_IRQHandler+0xae>
 8000c9c:	4f54310a 	.word	0x4f54310a
 8000ca0:	4f54300a 	.word	0x4f54300a
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000ca4:	f506 6500 	add.w	r5, r6, #2048	; 0x800
 8000ca8:	686b      	ldr	r3, [r5, #4]
 8000caa:	f023 0301 	bic.w	r3, r3, #1
 8000cae:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8000cb0:	2110      	movs	r1, #16
 8000cb2:	6820      	ldr	r0, [r4, #0]
 8000cb4:	f000 fb82 	bl	80013bc <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cb8:	6863      	ldr	r3, [r4, #4]
 8000cba:	b303      	cbz	r3, 8000cfe <HAL_PCD_IRQHandler+0x4a2>
 8000cbc:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8000cc0:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8000cc4:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8000ccc:	601a      	str	r2, [r3, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000cd4:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8000cd6:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8000cda:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000cde:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8000ce2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8000ce6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000cea:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000cee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cf2:	f10b 0b01 	add.w	fp, fp, #1
 8000cf6:	3320      	adds	r3, #32
 8000cf8:	6862      	ldr	r2, [r4, #4]
 8000cfa:	455a      	cmp	r2, fp
 8000cfc:	d8e2      	bhi.n	8000cc4 <HAL_PCD_IRQHandler+0x468>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8000cfe:	69eb      	ldr	r3, [r5, #28]
 8000d00:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000d04:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8000d06:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000d08:	b1db      	cbz	r3, 8000d42 <HAL_PCD_IRQHandler+0x4e6>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8000d0a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8000d0e:	f043 030b 	orr.w	r3, r3, #11
 8000d12:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8000d16:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000d18:	f043 030b 	orr.w	r3, r3, #11
 8000d1c:	646b      	str	r3, [r5, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000d1e:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
 8000d22:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8000d26:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8000d2a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8000d2e:	7c21      	ldrb	r1, [r4, #16]
 8000d30:	6820      	ldr	r0, [r4, #0]
 8000d32:	f000 ff9d 	bl	8001c70 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8000d36:	6822      	ldr	r2, [r4, #0]
 8000d38:	6953      	ldr	r3, [r2, #20]
 8000d3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d3e:	6153      	str	r3, [r2, #20]
 8000d40:	e5ef      	b.n	8000922 <HAL_PCD_IRQHandler+0xc6>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8000d42:	696b      	ldr	r3, [r5, #20]
 8000d44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d48:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8000d4c:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8000d4e:	692b      	ldr	r3, [r5, #16]
 8000d50:	f043 030b 	orr.w	r3, r3, #11
 8000d54:	612b      	str	r3, [r5, #16]
 8000d56:	e7e2      	b.n	8000d1e <HAL_PCD_IRQHandler+0x4c2>
      (void)USB_ActivateSetup(hpcd->Instance);
 8000d58:	6820      	ldr	r0, [r4, #0]
 8000d5a:	f000 ff79 	bl	8001c50 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8000d5e:	6820      	ldr	r0, [r4, #0]
 8000d60:	f000 fc22 	bl	80015a8 <USB_GetDevSpeed>
 8000d64:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8000d66:	6825      	ldr	r5, [r4, #0]
 8000d68:	f000 fa1a 	bl	80011a0 <HAL_RCC_GetHCLKFreq>
 8000d6c:	4601      	mov	r1, r0
 8000d6e:	7b22      	ldrb	r2, [r4, #12]
 8000d70:	4628      	mov	r0, r5
 8000d72:	f000 fa73 	bl	800125c <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8000d76:	4620      	mov	r0, r4
 8000d78:	f001 ff0d 	bl	8002b96 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8000d7c:	6822      	ldr	r2, [r4, #0]
 8000d7e:	6953      	ldr	r3, [r2, #20]
 8000d80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d84:	6153      	str	r3, [r2, #20]
 8000d86:	e5d3      	b.n	8000930 <HAL_PCD_IRQHandler+0xd4>
      HAL_PCD_SOFCallback(hpcd);
 8000d88:	4620      	mov	r0, r4
 8000d8a:	f001 fefe 	bl	8002b8a <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8000d8e:	6822      	ldr	r2, [r4, #0]
 8000d90:	6953      	ldr	r3, [r2, #20]
 8000d92:	f003 0308 	and.w	r3, r3, #8
 8000d96:	6153      	str	r3, [r2, #20]
 8000d98:	e5d1      	b.n	800093e <HAL_PCD_IRQHandler+0xe2>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	f001 ff35 	bl	8002c0c <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8000da2:	6822      	ldr	r2, [r4, #0]
 8000da4:	6953      	ldr	r3, [r2, #20]
 8000da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000daa:	6153      	str	r3, [r2, #20]
 8000dac:	e5ce      	b.n	800094c <HAL_PCD_IRQHandler+0xf0>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8000dae:	2100      	movs	r1, #0
 8000db0:	4620      	mov	r0, r4
 8000db2:	f001 ff25 	bl	8002c00 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000db6:	6822      	ldr	r2, [r4, #0]
 8000db8:	6953      	ldr	r3, [r2, #20]
 8000dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dbe:	6153      	str	r3, [r2, #20]
 8000dc0:	e5cb      	b.n	800095a <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_ConnectCallback(hpcd);
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	f001 ff28 	bl	8002c18 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8000dc8:	6822      	ldr	r2, [r4, #0]
 8000dca:	6953      	ldr	r3, [r2, #20]
 8000dcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000dd0:	6153      	str	r3, [r2, #20]
 8000dd2:	e5c9      	b.n	8000968 <HAL_PCD_IRQHandler+0x10c>
        HAL_PCD_DisconnectCallback(hpcd);
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f001 ff25 	bl	8002c24 <HAL_PCD_DisconnectCallback>
 8000dda:	e5d2      	b.n	8000982 <HAL_PCD_IRQHandler+0x126>

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8000ddc:	4620      	mov	r0, r4
 8000dde:	f001 feb5 	bl	8002b4c <HAL_PCD_SetupStageCallback>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000de2:	f016 0f10 	tst.w	r6, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000de6:	bf1c      	itt	ne
 8000de8:	2310      	movne	r3, #16
 8000dea:	60bb      	strne	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000dec:	f016 0f20 	tst.w	r6, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000df0:	bf1c      	itt	ne
 8000df2:	2320      	movne	r3, #32
 8000df4:	60bb      	strne	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8000df6:	f416 5f00 	tst.w	r6, #8192	; 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8000dfa:	bf1c      	itt	ne
 8000dfc:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 8000e00:	60bb      	strne	r3, [r7, #8]
        epnum++;
 8000e02:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 8000e06:	3720      	adds	r7, #32
 8000e08:	f10a 0a1c 	add.w	sl, sl, #28
 8000e0c:	086d      	lsrs	r5, r5, #1
 8000e0e:	f43f ae6e 	beq.w	8000aee <HAL_PCD_IRQHandler+0x292>
        if ((ep_intr & 0x1U) != 0U)
 8000e12:	f015 0f01 	tst.w	r5, #1
 8000e16:	d0f4      	beq.n	8000e02 <HAL_PCD_IRQHandler+0x5a6>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000e18:	fa5f f988 	uxtb.w	r9, r8
 8000e1c:	4649      	mov	r1, r9
 8000e1e:	6820      	ldr	r0, [r4, #0]
 8000e20:	f000 fef6 	bl	8001c10 <USB_ReadDevOutEPInterrupt>
 8000e24:	4606      	mov	r6, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000e26:	f010 0f01 	tst.w	r0, #1
 8000e2a:	f47f adec 	bne.w	8000a06 <HAL_PCD_IRQHandler+0x1aa>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000e2e:	f016 0f08 	tst.w	r6, #8
 8000e32:	d0d6      	beq.n	8000de2 <HAL_PCD_IRQHandler+0x586>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000e34:	2308      	movs	r3, #8
 8000e36:	60bb      	str	r3, [r7, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000e38:	6823      	ldr	r3, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8000e3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8000e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000e40:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8000e44:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8000e46:	480b      	ldr	r0, [pc, #44]	; (8000e74 <HAL_PCD_IRQHandler+0x618>)
 8000e48:	4282      	cmp	r2, r0
 8000e4a:	d9c7      	bls.n	8000ddc <HAL_PCD_IRQHandler+0x580>
 8000e4c:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8000e50:	d002      	beq.n	8000e58 <HAL_PCD_IRQHandler+0x5fc>
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8000e52:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e56:	609a      	str	r2, [r3, #8]
  HAL_PCD_SetupStageCallback(hpcd);
 8000e58:	4620      	mov	r0, r4
 8000e5a:	f001 fe77 	bl	8002b4c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8000e5e:	6923      	ldr	r3, [r4, #16]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d1be      	bne.n	8000de2 <HAL_PCD_IRQHandler+0x586>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000e64:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8000e68:	2101      	movs	r1, #1
 8000e6a:	6820      	ldr	r0, [r4, #0]
 8000e6c:	f000 ff00 	bl	8001c70 <USB_EP0_OutStart>
 8000e70:	e7b7      	b.n	8000de2 <HAL_PCD_IRQHandler+0x586>
 8000e72:	bf00      	nop
 8000e74:	4f54300a 	.word	0x4f54300a

08000e78 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8000e78:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d00d      	beq.n	8000e9c <HAL_PCD_SetAddress+0x24>
{
 8000e80:	b510      	push	{r4, lr}
 8000e82:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000e84:	2301      	movs	r3, #1
 8000e86:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8000e8a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000e8e:	6800      	ldr	r0, [r0, #0]
 8000e90:	f000 fe7e 	bl	8001b90 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000e94:	2000      	movs	r0, #0
 8000e96:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8000e9a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000e9c:	2002      	movs	r0, #2
}
 8000e9e:	4770      	bx	lr

08000ea0 <HAL_PCD_EP_Open>:
{
 8000ea0:	b510      	push	{r4, lr}
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8000ea6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000eaa:	d128      	bne.n	8000efe <HAL_PCD_EP_Open+0x5e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000eac:	f001 000f 	and.w	r0, r1, #15
 8000eb0:	ebc0 0ec0 	rsb	lr, r0, r0, lsl #3
 8000eb4:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8000eb8:	f50e 71fe 	add.w	r1, lr, #508	; 0x1fc
    ep->is_in = 0U;
 8000ebc:	4670      	mov	r0, lr
 8000ebe:	f04f 0e00 	mov.w	lr, #0
 8000ec2:	f880 e1fd 	strb.w	lr, [r0, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8000ec6:	f00c 0c0f 	and.w	ip, ip, #15
 8000eca:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 8000ece:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8000ed0:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8000ed2:	784a      	ldrb	r2, [r1, #1]
 8000ed4:	b10a      	cbz	r2, 8000eda <HAL_PCD_EP_Open+0x3a>
    ep->tx_fifo_num = ep->num;
 8000ed6:	f8a1 c006 	strh.w	ip, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8000eda:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8000edc:	bf04      	itt	eq
 8000ede:	2300      	moveq	r3, #0
 8000ee0:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8000ee2:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d019      	beq.n	8000f1e <HAL_PCD_EP_Open+0x7e>
 8000eea:	2301      	movs	r3, #1
 8000eec:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000ef0:	6820      	ldr	r0, [r4, #0]
 8000ef2:	f000 fb68 	bl	80015c6 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8000efc:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000efe:	f001 000f 	and.w	r0, r1, #15
 8000f02:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 8000f06:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000f0a:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8000f0c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8000f10:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000f14:	f04f 0e01 	mov.w	lr, #1
 8000f18:	f880 e03d 	strb.w	lr, [r0, #61]	; 0x3d
 8000f1c:	e7d3      	b.n	8000ec6 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8000f1e:	2002      	movs	r0, #2
 8000f20:	e7ec      	b.n	8000efc <HAL_PCD_EP_Open+0x5c>

08000f22 <HAL_PCD_EP_Close>:
{
 8000f22:	b510      	push	{r4, lr}
 8000f24:	4604      	mov	r4, r0
 8000f26:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8000f28:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000f2c:	d11f      	bne.n	8000f6e <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f2e:	f001 020f 	and.w	r2, r1, #15
 8000f32:	ebc2 01c2 	rsb	r1, r2, r2, lsl #3
 8000f36:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000f3a:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8000f3e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8000f42:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000f46:	2000      	movs	r0, #0
 8000f48:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000f4c:	f003 030f 	and.w	r3, r3, #15
 8000f50:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8000f52:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d018      	beq.n	8000f8c <HAL_PCD_EP_Close+0x6a>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000f60:	6820      	ldr	r0, [r4, #0]
 8000f62:	f000 fb7b 	bl	800165c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8000f6c:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f6e:	f001 020f 	and.w	r2, r1, #15
 8000f72:	ebc2 01c2 	rsb	r1, r2, r2, lsl #3
 8000f76:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000f7a:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8000f7c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8000f80:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000f84:	2001      	movs	r0, #1
 8000f86:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 8000f8a:	e7df      	b.n	8000f4c <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8000f8c:	2002      	movs	r0, #2
 8000f8e:	e7ed      	b.n	8000f6c <HAL_PCD_EP_Close+0x4a>

08000f90 <HAL_PCD_EP_Receive>:
{
 8000f90:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f92:	f001 040f 	and.w	r4, r1, #15
 8000f96:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8000f9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000f9e:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_buff = pBuf;
 8000fa2:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 8000fa6:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8000faa:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
  ep->xfer_len = len;
 8000fae:	f8cc 3210 	str.w	r3, [ip, #528]	; 0x210
  ep->xfer_count = 0U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f8cc 3214 	str.w	r3, [ip, #532]	; 0x214
  ep->is_in = 0U;
 8000fb8:	f88c 31fd 	strb.w	r3, [ip, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8000fbc:	f88c 41fc 	strb.w	r4, [ip, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8000fc0:	6903      	ldr	r3, [r0, #16]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d006      	beq.n	8000fd4 <HAL_PCD_EP_Receive+0x44>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000fc6:	b964      	cbnz	r4, 8000fe2 <HAL_PCD_EP_Receive+0x52>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	6800      	ldr	r0, [r0, #0]
 8000fcc:	f000 fbb4 	bl	8001738 <USB_EP0StartXfer>
}
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8000fd4:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 8000fd8:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8000fdc:	f8cc 220c 	str.w	r2, [ip, #524]	; 0x20c
 8000fe0:	e7f1      	b.n	8000fc6 <HAL_PCD_EP_Receive+0x36>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	6800      	ldr	r0, [r0, #0]
 8000fe6:	f000 fc4b 	bl	8001880 <USB_EPStartXfer>
 8000fea:	e7f1      	b.n	8000fd0 <HAL_PCD_EP_Receive+0x40>

08000fec <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000fec:	f001 010f 	and.w	r1, r1, #15
 8000ff0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8000ff4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8000ff8:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8000ffc:	4770      	bx	lr

08000ffe <HAL_PCD_EP_Transmit>:
{
 8000ffe:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001000:	f001 040f 	and.w	r4, r1, #15
 8001004:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8001008:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800100c:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_buff = pBuf;
 800100e:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 8001012:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8001016:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_len = len;
 800101a:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->xfer_count = 0U;
 800101e:	2300      	movs	r3, #0
 8001020:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->is_in = 1U;
 8001024:	2301      	movs	r3, #1
 8001026:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800102a:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 800102e:	6903      	ldr	r3, [r0, #16]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d006      	beq.n	8001042 <HAL_PCD_EP_Transmit+0x44>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001034:	b964      	cbnz	r4, 8001050 <HAL_PCD_EP_Transmit+0x52>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001036:	b2da      	uxtb	r2, r3
 8001038:	6800      	ldr	r0, [r0, #0]
 800103a:	f000 fb7d 	bl	8001738 <USB_EP0StartXfer>
}
 800103e:	2000      	movs	r0, #0
 8001040:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8001042:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 8001046:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800104a:	f8cc 204c 	str.w	r2, [ip, #76]	; 0x4c
 800104e:	e7f1      	b.n	8001034 <HAL_PCD_EP_Transmit+0x36>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001050:	b2da      	uxtb	r2, r3
 8001052:	6800      	ldr	r0, [r0, #0]
 8001054:	f000 fc14 	bl	8001880 <USB_EPStartXfer>
 8001058:	e7f1      	b.n	800103e <HAL_PCD_EP_Transmit+0x40>

0800105a <HAL_PCD_EP_SetStall>:
{
 800105a:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800105c:	f001 050f 	and.w	r5, r1, #15
 8001060:	6842      	ldr	r2, [r0, #4]
 8001062:	4295      	cmp	r5, r2
 8001064:	d837      	bhi.n	80010d6 <HAL_PCD_EP_SetStall+0x7c>
 8001066:	4604      	mov	r4, r0
 8001068:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 800106a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800106e:	d11e      	bne.n	80010ae <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 8001070:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001074:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8001078:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800107c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8001080:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001084:	2200      	movs	r2, #0
 8001086:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 800108a:	2301      	movs	r3, #1
 800108c:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800108e:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8001090:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8001094:	2b01      	cmp	r3, #1
 8001096:	d020      	beq.n	80010da <HAL_PCD_EP_SetStall+0x80>
 8001098:	2301      	movs	r3, #1
 800109a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800109e:	6820      	ldr	r0, [r4, #0]
 80010a0:	f000 fd1b 	bl	8001ada <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80010a4:	b185      	cbz	r5, 80010c8 <HAL_PCD_EP_SetStall+0x6e>
  __HAL_UNLOCK(hpcd);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80010ac:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010ae:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
 80010b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80010b6:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 80010b8:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 80010bc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80010c6:	e7e0      	b.n	800108a <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80010c8:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80010cc:	7c21      	ldrb	r1, [r4, #16]
 80010ce:	6820      	ldr	r0, [r4, #0]
 80010d0:	f000 fdce 	bl	8001c70 <USB_EP0_OutStart>
 80010d4:	e7e7      	b.n	80010a6 <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 80010d6:	2001      	movs	r0, #1
 80010d8:	e7e8      	b.n	80010ac <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 80010da:	2002      	movs	r0, #2
 80010dc:	e7e6      	b.n	80010ac <HAL_PCD_EP_SetStall+0x52>

080010de <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80010de:	f001 030f 	and.w	r3, r1, #15
 80010e2:	6842      	ldr	r2, [r0, #4]
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d82f      	bhi.n	8001148 <HAL_PCD_EP_ClrStall+0x6a>
{
 80010e8:	b510      	push	{r4, lr}
 80010ea:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80010ec:	f011 0f80 	tst.w	r1, #128	; 0x80
 80010f0:	d11d      	bne.n	800112e <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010f2:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 80010f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80010fa:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 80010fe:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8001102:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001106:	2000      	movs	r0, #0
 8001108:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 800110c:	2200      	movs	r2, #0
 800110e:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001110:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8001112:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8001116:	2b01      	cmp	r3, #1
 8001118:	d018      	beq.n	800114c <HAL_PCD_EP_ClrStall+0x6e>
 800111a:	2301      	movs	r3, #1
 800111c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001120:	6820      	ldr	r0, [r4, #0]
 8001122:	f000 fd07 	bl	8001b34 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001126:	2000      	movs	r0, #0
 8001128:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800112c:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800112e:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8001132:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8001136:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8001138:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800113c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001140:	2001      	movs	r0, #1
 8001142:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 8001146:	e7e1      	b.n	800110c <HAL_PCD_EP_ClrStall+0x2e>
    return HAL_ERROR;
 8001148:	2001      	movs	r0, #1
}
 800114a:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 800114c:	2002      	movs	r0, #2
 800114e:	e7ed      	b.n	800112c <HAL_PCD_EP_ClrStall+0x4e>

08001150 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001150:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001152:	6804      	ldr	r4, [r0, #0]
 8001154:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 8001156:	b929      	cbnz	r1, 8001164 <HAL_PCDEx_SetTxFiFo+0x14>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001158:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800115c:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800115e:	2000      	movs	r0, #0
 8001160:	bc10      	pop	{r4}
 8001162:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001164:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001166:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800116a:	f1b1 0c01 	subs.w	ip, r1, #1
 800116e:	d00b      	beq.n	8001188 <HAL_PCDEx_SetTxFiFo+0x38>
 8001170:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001172:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8001176:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800117a:	6849      	ldr	r1, [r1, #4]
 800117c:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001180:	3301      	adds	r3, #1
 8001182:	b2db      	uxtb	r3, r3
 8001184:	4563      	cmp	r3, ip
 8001186:	d3f4      	bcc.n	8001172 <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001188:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800118c:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8001190:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 8001194:	6060      	str	r0, [r4, #4]
 8001196:	e7e2      	b.n	800115e <HAL_PCDEx_SetTxFiFo+0xe>

08001198 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001198:	6803      	ldr	r3, [r0, #0]
 800119a:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 800119c:	2000      	movs	r0, #0
 800119e:	4770      	bx	lr

080011a0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80011a0:	4b01      	ldr	r3, [pc, #4]	; (80011a8 <HAL_RCC_GetHCLKFreq+0x8>)
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000000 	.word	0x20000000

080011ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80011ac:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <USB_CoreReset+0x30>)
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80011ae:	6902      	ldr	r2, [r0, #16]
 80011b0:	2a00      	cmp	r2, #0
 80011b2:	db03      	blt.n	80011bc <USB_CoreReset+0x10>
    if (++count > 200000U)
 80011b4:	3b01      	subs	r3, #1
 80011b6:	d1fa      	bne.n	80011ae <USB_CoreReset+0x2>
      return HAL_TIMEOUT;
 80011b8:	2003      	movs	r0, #3
 80011ba:	4770      	bx	lr

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80011bc:	6903      	ldr	r3, [r0, #16]
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	6103      	str	r3, [r0, #16]
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <USB_CoreReset+0x30>)
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80011c6:	6902      	ldr	r2, [r0, #16]
 80011c8:	f012 0f01 	tst.w	r2, #1
 80011cc:	d003      	beq.n	80011d6 <USB_CoreReset+0x2a>
    if (++count > 200000U)
 80011ce:	3b01      	subs	r3, #1
 80011d0:	d1f9      	bne.n	80011c6 <USB_CoreReset+0x1a>
      return HAL_TIMEOUT;
 80011d2:	2003      	movs	r0, #3

  return HAL_OK;
}
 80011d4:	4770      	bx	lr
  return HAL_OK;
 80011d6:	2000      	movs	r0, #0
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	00030d40 	.word	0x00030d40

080011e0 <USB_CoreInit>:
{
 80011e0:	b084      	sub	sp, #16
 80011e2:	b510      	push	{r4, lr}
 80011e4:	4604      	mov	r4, r0
 80011e6:	a803      	add	r0, sp, #12
 80011e8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80011ec:	9b08      	ldr	r3, [sp, #32]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d11f      	bne.n	8001232 <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80011f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80011f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f8:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80011fa:	68e3      	ldr	r3, [r4, #12]
 80011fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001204:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001206:	68e3      	ldr	r3, [r4, #12]
 8001208:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800120c:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 800120e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001210:	2b01      	cmp	r3, #1
 8001212:	d009      	beq.n	8001228 <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 8001214:	4620      	mov	r0, r4
 8001216:	f7ff ffc9 	bl	80011ac <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800121a:	9b06      	ldr	r3, [sp, #24]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d014      	beq.n	800124a <USB_CoreInit+0x6a>
}
 8001220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001224:	b004      	add	sp, #16
 8001226:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001228:	68e3      	ldr	r3, [r4, #12]
 800122a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800122e:	60e3      	str	r3, [r4, #12]
 8001230:	e7f0      	b.n	8001214 <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001232:	68e3      	ldr	r3, [r4, #12]
 8001234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001238:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 800123a:	4620      	mov	r0, r4
 800123c:	f7ff ffb6 	bl	80011ac <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001240:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001246:	63a3      	str	r3, [r4, #56]	; 0x38
 8001248:	e7e7      	b.n	800121a <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800124a:	68a3      	ldr	r3, [r4, #8]
 800124c:	f043 0306 	orr.w	r3, r3, #6
 8001250:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001252:	68a3      	ldr	r3, [r4, #8]
 8001254:	f043 0320 	orr.w	r3, r3, #32
 8001258:	60a3      	str	r3, [r4, #8]
 800125a:	e7e1      	b.n	8001220 <USB_CoreInit+0x40>

0800125c <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800125c:	2a02      	cmp	r2, #2
 800125e:	d00a      	beq.n	8001276 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8001260:	2109      	movs	r1, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8001262:	68c2      	ldr	r2, [r0, #12]
 8001264:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8001268:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800126a:	68c3      	ldr	r3, [r0, #12]
 800126c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001270:	60c3      	str	r3, [r0, #12]
}
 8001272:	2000      	movs	r0, #0
 8001274:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8001276:	4b23      	ldr	r3, [pc, #140]	; (8001304 <USB_SetTurnaroundTime+0xa8>)
 8001278:	440b      	add	r3, r1
 800127a:	4a23      	ldr	r2, [pc, #140]	; (8001308 <USB_SetTurnaroundTime+0xac>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d930      	bls.n	80012e2 <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8001280:	4b22      	ldr	r3, [pc, #136]	; (800130c <USB_SetTurnaroundTime+0xb0>)
 8001282:	440b      	add	r3, r1
 8001284:	4a22      	ldr	r2, [pc, #136]	; (8001310 <USB_SetTurnaroundTime+0xb4>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d92d      	bls.n	80012e6 <USB_SetTurnaroundTime+0x8a>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800128a:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 800128e:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8001292:	4a20      	ldr	r2, [pc, #128]	; (8001314 <USB_SetTurnaroundTime+0xb8>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d928      	bls.n	80012ea <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8001298:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 800129c:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 80012a0:	4a1d      	ldr	r2, [pc, #116]	; (8001318 <USB_SetTurnaroundTime+0xbc>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d323      	bcc.n	80012ee <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80012a6:	4b1d      	ldr	r3, [pc, #116]	; (800131c <USB_SetTurnaroundTime+0xc0>)
 80012a8:	440b      	add	r3, r1
 80012aa:	4a1d      	ldr	r2, [pc, #116]	; (8001320 <USB_SetTurnaroundTime+0xc4>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d920      	bls.n	80012f2 <USB_SetTurnaroundTime+0x96>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80012b0:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <USB_SetTurnaroundTime+0xc8>)
 80012b2:	440b      	add	r3, r1
 80012b4:	4a1c      	ldr	r2, [pc, #112]	; (8001328 <USB_SetTurnaroundTime+0xcc>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d31d      	bcc.n	80012f6 <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80012ba:	4b1c      	ldr	r3, [pc, #112]	; (800132c <USB_SetTurnaroundTime+0xd0>)
 80012bc:	440b      	add	r3, r1
 80012be:	4a1c      	ldr	r2, [pc, #112]	; (8001330 <USB_SetTurnaroundTime+0xd4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d31a      	bcc.n	80012fa <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80012c4:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 80012c8:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 80012cc:	4a19      	ldr	r2, [pc, #100]	; (8001334 <USB_SetTurnaroundTime+0xd8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d315      	bcc.n	80012fe <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80012d2:	4b19      	ldr	r3, [pc, #100]	; (8001338 <USB_SetTurnaroundTime+0xdc>)
 80012d4:	440b      	add	r3, r1
      UsbTrd = 0x6U;
 80012d6:	4919      	ldr	r1, [pc, #100]	; (800133c <USB_SetTurnaroundTime+0xe0>)
 80012d8:	428b      	cmp	r3, r1
 80012da:	bf34      	ite	cc
 80012dc:	2107      	movcc	r1, #7
 80012de:	2106      	movcs	r1, #6
 80012e0:	e7bf      	b.n	8001262 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 80012e2:	210f      	movs	r1, #15
 80012e4:	e7bd      	b.n	8001262 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 80012e6:	210e      	movs	r1, #14
 80012e8:	e7bb      	b.n	8001262 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 80012ea:	210d      	movs	r1, #13
 80012ec:	e7b9      	b.n	8001262 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 80012ee:	210c      	movs	r1, #12
 80012f0:	e7b7      	b.n	8001262 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 80012f2:	210b      	movs	r1, #11
 80012f4:	e7b5      	b.n	8001262 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 80012f6:	210a      	movs	r1, #10
 80012f8:	e7b3      	b.n	8001262 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 80012fa:	2109      	movs	r1, #9
 80012fc:	e7b1      	b.n	8001262 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 80012fe:	2108      	movs	r1, #8
 8001300:	e7af      	b.n	8001262 <USB_SetTurnaroundTime+0x6>
 8001302:	bf00      	nop
 8001304:	ff275340 	.word	0xff275340
 8001308:	000c34ff 	.word	0x000c34ff
 800130c:	ff1b1e40 	.word	0xff1b1e40
 8001310:	000f423f 	.word	0x000f423f
 8001314:	00124f7f 	.word	0x00124f7f
 8001318:	0013d620 	.word	0x0013d620
 800131c:	fee5b660 	.word	0xfee5b660
 8001320:	0016e35f 	.word	0x0016e35f
 8001324:	feced300 	.word	0xfeced300
 8001328:	001b7740 	.word	0x001b7740
 800132c:	feb35bc0 	.word	0xfeb35bc0
 8001330:	002191c0 	.word	0x002191c0
 8001334:	00387520 	.word	0x00387520
 8001338:	fe5954e0 	.word	0xfe5954e0
 800133c:	00419ce0 	.word	0x00419ce0

08001340 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001340:	6883      	ldr	r3, [r0, #8]
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	6083      	str	r3, [r0, #8]
}
 8001348:	2000      	movs	r0, #0
 800134a:	4770      	bx	lr

0800134c <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800134c:	6883      	ldr	r3, [r0, #8]
 800134e:	f023 0301 	bic.w	r3, r3, #1
 8001352:	6083      	str	r3, [r0, #8]
}
 8001354:	2000      	movs	r0, #0
 8001356:	4770      	bx	lr

08001358 <USB_SetCurrentMode>:
{
 8001358:	b570      	push	{r4, r5, r6, lr}
 800135a:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800135c:	68c3      	ldr	r3, [r0, #12]
 800135e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001362:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8001364:	2901      	cmp	r1, #1
 8001366:	d015      	beq.n	8001394 <USB_SetCurrentMode+0x3c>
  else if (mode == USB_DEVICE_MODE)
 8001368:	bb29      	cbnz	r1, 80013b6 <USB_SetCurrentMode+0x5e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800136a:	68c3      	ldr	r3, [r0, #12]
 800136c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001370:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8001372:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8001374:	2601      	movs	r6, #1
 8001376:	4630      	mov	r0, r6
 8001378:	f7ff f82a 	bl	80003d0 <HAL_Delay>
      ms++;
 800137c:	3401      	adds	r4, #1
  return ((USBx->GINTSTS) & 0x1U);
 800137e:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8001380:	f013 0f01 	tst.w	r3, #1
 8001384:	d001      	beq.n	800138a <USB_SetCurrentMode+0x32>
 8001386:	2c32      	cmp	r4, #50	; 0x32
 8001388:	d1f5      	bne.n	8001376 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 800138a:	2c32      	cmp	r4, #50	; 0x32
 800138c:	bf14      	ite	ne
 800138e:	2000      	movne	r0, #0
 8001390:	2001      	moveq	r0, #1
}
 8001392:	bd70      	pop	{r4, r5, r6, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8001394:	68c3      	ldr	r3, [r0, #12]
 8001396:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800139a:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 800139c:	2400      	movs	r4, #0
      HAL_Delay(1U);
 800139e:	2601      	movs	r6, #1
 80013a0:	4630      	mov	r0, r6
 80013a2:	f7ff f815 	bl	80003d0 <HAL_Delay>
      ms++;
 80013a6:	3401      	adds	r4, #1
  return ((USBx->GINTSTS) & 0x1U);
 80013a8:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80013aa:	f013 0f01 	tst.w	r3, #1
 80013ae:	d1ec      	bne.n	800138a <USB_SetCurrentMode+0x32>
 80013b0:	2c32      	cmp	r4, #50	; 0x32
 80013b2:	d1f5      	bne.n	80013a0 <USB_SetCurrentMode+0x48>
 80013b4:	e7e9      	b.n	800138a <USB_SetCurrentMode+0x32>
    return HAL_ERROR;
 80013b6:	2001      	movs	r0, #1
 80013b8:	e7eb      	b.n	8001392 <USB_SetCurrentMode+0x3a>
	...

080013bc <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80013bc:	0189      	lsls	r1, r1, #6
 80013be:	f041 0120 	orr.w	r1, r1, #32
 80013c2:	6101      	str	r1, [r0, #16]
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <USB_FlushTxFifo+0x20>)
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80013c6:	6902      	ldr	r2, [r0, #16]
 80013c8:	f012 0f20 	tst.w	r2, #32
 80013cc:	d003      	beq.n	80013d6 <USB_FlushTxFifo+0x1a>
    if (++count > 200000U)
 80013ce:	3b01      	subs	r3, #1
 80013d0:	d1f9      	bne.n	80013c6 <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 80013d2:	2003      	movs	r0, #3
}
 80013d4:	4770      	bx	lr
  return HAL_OK;
 80013d6:	2000      	movs	r0, #0
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	00030d40 	.word	0x00030d40

080013e0 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80013e0:	2310      	movs	r3, #16
 80013e2:	6103      	str	r3, [r0, #16]
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <USB_FlushRxFifo+0x1c>)
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80013e6:	6902      	ldr	r2, [r0, #16]
 80013e8:	f012 0f10 	tst.w	r2, #16
 80013ec:	d003      	beq.n	80013f6 <USB_FlushRxFifo+0x16>
    if (++count > 200000U)
 80013ee:	3b01      	subs	r3, #1
 80013f0:	d1f9      	bne.n	80013e6 <USB_FlushRxFifo+0x6>
      return HAL_TIMEOUT;
 80013f2:	2003      	movs	r0, #3
}
 80013f4:	4770      	bx	lr
  return HAL_OK;
 80013f6:	2000      	movs	r0, #0
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	00030d40 	.word	0x00030d40

08001400 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8001400:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001404:	4319      	orrs	r1, r3
 8001406:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800140a:	2000      	movs	r0, #0
 800140c:	4770      	bx	lr
	...

08001410 <USB_DevInit>:
{
 8001410:	b084      	sub	sp, #16
 8001412:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001416:	4604      	mov	r4, r0
 8001418:	a809      	add	r0, sp, #36	; 0x24
 800141a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800141e:	460d      	mov	r5, r1
 8001420:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  for (i = 0U; i < 15U; i++)
 8001422:	2300      	movs	r3, #0
    USBx->DIEPTXF[i] = 0U;
 8001424:	4619      	mov	r1, r3
 8001426:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800142a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800142e:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8001430:	3301      	adds	r3, #1
 8001432:	2b0f      	cmp	r3, #15
 8001434:	d1f7      	bne.n	8001426 <USB_DevInit+0x16>
  if (cfg.vbus_sensing_enable == 0U)
 8001436:	bb26      	cbnz	r6, 8001482 <USB_DevInit+0x72>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8001438:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001444:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001446:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800144a:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800144c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800144e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001452:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8001454:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800145a:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001462:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 8001466:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800146a:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800146e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001470:	2b01      	cmp	r3, #1
 8001472:	d114      	bne.n	800149e <USB_DevInit+0x8e>
    if (cfg.speed == USBD_HS_SPEED)
 8001474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001476:	b96b      	cbnz	r3, 8001494 <USB_DevInit+0x84>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8001478:	2100      	movs	r1, #0
 800147a:	4620      	mov	r0, r4
 800147c:	f7ff ffc0 	bl	8001400 <USB_SetDevSpeed>
 8001480:	e011      	b.n	80014a6 <USB_DevInit+0x96>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8001482:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001484:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001488:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800148a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800148c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001490:	63a3      	str	r3, [r4, #56]	; 0x38
 8001492:	e7e3      	b.n	800145c <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8001494:	2101      	movs	r1, #1
 8001496:	4620      	mov	r0, r4
 8001498:	f7ff ffb2 	bl	8001400 <USB_SetDevSpeed>
 800149c:	e003      	b.n	80014a6 <USB_DevInit+0x96>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800149e:	2103      	movs	r1, #3
 80014a0:	4620      	mov	r0, r4
 80014a2:	f7ff ffad 	bl	8001400 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80014a6:	2110      	movs	r1, #16
 80014a8:	4620      	mov	r0, r4
 80014aa:	f7ff ff87 	bl	80013bc <USB_FlushTxFifo>
 80014ae:	4680      	mov	r8, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80014b0:	4620      	mov	r0, r4
 80014b2:	f7ff ff95 	bl	80013e0 <USB_FlushRxFifo>
 80014b6:	ea48 0800 	orr.w	r8, r8, r0
 80014ba:	f018 0fff 	tst.w	r8, #255	; 0xff
    ret = HAL_ERROR;
 80014be:	bf14      	ite	ne
 80014c0:	f04f 0e01 	movne.w	lr, #1
 80014c4:	f04f 0e00 	moveq.w	lr, #0
  USBx_DEVICE->DIEPMSK = 0U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	613b      	str	r3, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80014cc:	617b      	str	r3, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80014ce:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80014d0:	2d00      	cmp	r5, #0
 80014d2:	d03f      	beq.n	8001554 <USB_DevInit+0x144>
 80014d4:	f504 6310 	add.w	r3, r4, #2304	; 0x900
 80014d8:	2200      	movs	r2, #0
      USBx_INEP(i)->DIEPCTL = 0U;
 80014da:	4694      	mov	ip, r2
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80014dc:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80014e0:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80014e4:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 80014e8:	e00a      	b.n	8001500 <USB_DevInit+0xf0>
      if (i == 0U)
 80014ea:	b182      	cbz	r2, 800150e <USB_DevInit+0xfe>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80014ec:	f8c3 9000 	str.w	r9, [r3]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80014f0:	f8c1 c010 	str.w	ip, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80014f4:	f8c1 8008 	str.w	r8, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80014f8:	3201      	adds	r2, #1
 80014fa:	3320      	adds	r3, #32
 80014fc:	4295      	cmp	r5, r2
 80014fe:	d009      	beq.n	8001514 <USB_DevInit+0x104>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8001500:	4619      	mov	r1, r3
 8001502:	6818      	ldr	r0, [r3, #0]
 8001504:	2800      	cmp	r0, #0
 8001506:	dbf0      	blt.n	80014ea <USB_DevInit+0xda>
      USBx_INEP(i)->DIEPCTL = 0U;
 8001508:	f8c3 c000 	str.w	ip, [r3]
 800150c:	e7f0      	b.n	80014f0 <USB_DevInit+0xe0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800150e:	f8c3 a000 	str.w	sl, [r3]
 8001512:	e7ed      	b.n	80014f0 <USB_DevInit+0xe0>
 8001514:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001518:	2200      	movs	r2, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800151a:	4694      	mov	ip, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800151c:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001520:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8001524:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 8001528:	e00a      	b.n	8001540 <USB_DevInit+0x130>
      if (i == 0U)
 800152a:	b182      	cbz	r2, 800154e <USB_DevInit+0x13e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800152c:	f8c3 9000 	str.w	r9, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8001530:	f8c1 c010 	str.w	ip, [r1, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8001534:	f8c1 8008 	str.w	r8, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001538:	3201      	adds	r2, #1
 800153a:	3320      	adds	r3, #32
 800153c:	4295      	cmp	r5, r2
 800153e:	d009      	beq.n	8001554 <USB_DevInit+0x144>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8001540:	4619      	mov	r1, r3
 8001542:	6818      	ldr	r0, [r3, #0]
 8001544:	2800      	cmp	r0, #0
 8001546:	dbf0      	blt.n	800152a <USB_DevInit+0x11a>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8001548:	f8c3 c000 	str.w	ip, [r3]
 800154c:	e7f0      	b.n	8001530 <USB_DevInit+0x120>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800154e:	f8c3 a000 	str.w	sl, [r3]
 8001552:	e7ed      	b.n	8001530 <USB_DevInit+0x120>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800155a:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 800155c:	2300      	movs	r3, #0
 800155e:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8001560:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8001564:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8001566:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001568:	b91b      	cbnz	r3, 8001572 <USB_DevInit+0x162>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800156a:	69a3      	ldr	r3, [r4, #24]
 800156c:	f043 0310 	orr.w	r3, r3, #16
 8001570:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8001572:	69a2      	ldr	r2, [r4, #24]
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <USB_DevInit+0x194>)
 8001576:	4313      	orrs	r3, r2
 8001578:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800157a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800157c:	b11b      	cbz	r3, 8001586 <USB_DevInit+0x176>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800157e:	69a3      	ldr	r3, [r4, #24]
 8001580:	f043 0308 	orr.w	r3, r3, #8
 8001584:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8001586:	2e01      	cmp	r6, #1
 8001588:	d004      	beq.n	8001594 <USB_DevInit+0x184>
}
 800158a:	4670      	mov	r0, lr
 800158c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001590:	b004      	add	sp, #16
 8001592:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8001594:	69a3      	ldr	r3, [r4, #24]
 8001596:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800159a:	f043 0304 	orr.w	r3, r3, #4
 800159e:	61a3      	str	r3, [r4, #24]
 80015a0:	e7f3      	b.n	800158a <USB_DevInit+0x17a>
 80015a2:	bf00      	nop
 80015a4:	803c3800 	.word	0x803c3800

080015a8 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80015a8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80015ac:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80015b0:	f013 0f06 	tst.w	r3, #6
 80015b4:	d005      	beq.n	80015c2 <USB_GetDevSpeed+0x1a>
    speed = 0xFU;
 80015b6:	f013 0f02 	tst.w	r3, #2
 80015ba:	bf14      	ite	ne
 80015bc:	2002      	movne	r0, #2
 80015be:	200f      	moveq	r0, #15
 80015c0:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 80015c2:	2000      	movs	r0, #0
}
 80015c4:	4770      	bx	lr

080015c6 <USB_ActivateEndpoint>:
{
 80015c6:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 80015c8:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 80015cc:	784a      	ldrb	r2, [r1, #1]
 80015ce:	2a01      	cmp	r2, #1
 80015d0:	d022      	beq.n	8001618 <USB_ActivateEndpoint+0x52>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80015d2:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 80015d6:	f00c 0e0f 	and.w	lr, ip, #15
 80015da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015de:	fa03 f30e 	lsl.w	r3, r3, lr
 80015e2:	4323      	orrs	r3, r4
 80015e4:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80015e8:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 80015ec:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80015f0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80015f4:	d10e      	bne.n	8001614 <USB_ActivateEndpoint+0x4e>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80015f6:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80015fa:	688b      	ldr	r3, [r1, #8]
 80015fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001600:	4313      	orrs	r3, r2
                                    ((uint32_t)ep->type << 18) |
 8001602:	78ca      	ldrb	r2, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8001604:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001610:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8001614:	2000      	movs	r0, #0
 8001616:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8001618:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 800161c:	f00c 0e0f 	and.w	lr, ip, #15
 8001620:	fa02 f20e 	lsl.w	r2, r2, lr
 8001624:	4322      	orrs	r2, r4
 8001626:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800162a:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 800162e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8001632:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001636:	d1ed      	bne.n	8001614 <USB_ActivateEndpoint+0x4e>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8001638:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 800163c:	688a      	ldr	r2, [r1, #8]
 800163e:	f3c2 030a 	ubfx	r3, r2, #0, #11
 8001642:	4323      	orrs	r3, r4
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8001644:	78ca      	ldrb	r2, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8001646:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800164a:	ea43 538c 	orr.w	r3, r3, ip, lsl #22
 800164e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001656:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800165a:	e7db      	b.n	8001614 <USB_ActivateEndpoint+0x4e>

0800165c <USB_DeactivateEndpoint>:
{
 800165c:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 800165e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8001660:	784a      	ldrb	r2, [r1, #1]
 8001662:	2a01      	cmp	r2, #1
 8001664:	d026      	beq.n	80016b4 <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8001666:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800166a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800166e:	2a00      	cmp	r2, #0
 8001670:	db50      	blt.n	8001714 <USB_DeactivateEndpoint+0xb8>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8001672:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 8001676:	780a      	ldrb	r2, [r1, #0]
 8001678:	f002 020f 	and.w	r2, r2, #15
 800167c:	f04f 0c01 	mov.w	ip, #1
 8001680:	fa0c f202 	lsl.w	r2, ip, r2
 8001684:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 8001688:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800168c:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8001690:	7809      	ldrb	r1, [r1, #0]
 8001692:	f001 010f 	and.w	r1, r1, #15
 8001696:	fa0c fc01 	lsl.w	ip, ip, r1
 800169a:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 800169e:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80016a2:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 80016a6:	4a22      	ldr	r2, [pc, #136]	; (8001730 <USB_DeactivateEndpoint+0xd4>)
 80016a8:	400a      	ands	r2, r1
 80016aa:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 80016ae:	2000      	movs	r0, #0
 80016b0:	bc30      	pop	{r4, r5}
 80016b2:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80016b4:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80016b8:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80016bc:	2a00      	cmp	r2, #0
 80016be:	db1c      	blt.n	80016fa <USB_DeactivateEndpoint+0x9e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80016c0:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 80016c4:	780a      	ldrb	r2, [r1, #0]
 80016c6:	f002 020f 	and.w	r2, r2, #15
 80016ca:	2401      	movs	r4, #1
 80016cc:	fa04 f202 	lsl.w	r2, r4, r2
 80016d0:	ea25 0202 	bic.w	r2, r5, r2
 80016d4:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80016d8:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 80016dc:	7809      	ldrb	r1, [r1, #0]
 80016de:	f001 010f 	and.w	r1, r1, #15
 80016e2:	408c      	lsls	r4, r1
 80016e4:	ea22 0404 	bic.w	r4, r2, r4
 80016e8:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80016ec:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 80016f0:	4a10      	ldr	r2, [pc, #64]	; (8001734 <USB_DeactivateEndpoint+0xd8>)
 80016f2:	400a      	ands	r2, r1
 80016f4:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 80016f8:	e7d9      	b.n	80016ae <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80016fa:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80016fe:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001702:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8001706:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800170a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800170e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8001712:	e7d5      	b.n	80016c0 <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001714:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8001718:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800171c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8001720:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8001724:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001728:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800172c:	e7a1      	b.n	8001672 <USB_DeactivateEndpoint+0x16>
 800172e:	bf00      	nop
 8001730:	eff37800 	.word	0xeff37800
 8001734:	ec337800 	.word	0xec337800

08001738 <USB_EP0StartXfer>:
{
 8001738:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 800173a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800173c:	784c      	ldrb	r4, [r1, #1]
 800173e:	2c01      	cmp	r4, #1
 8001740:	d026      	beq.n	8001790 <USB_EP0StartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8001742:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8001746:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800174a:	691c      	ldr	r4, [r3, #16]
 800174c:	0ce4      	lsrs	r4, r4, #19
 800174e:	04e4      	lsls	r4, r4, #19
 8001750:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8001752:	691c      	ldr	r4, [r3, #16]
 8001754:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8001758:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800175c:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 800175e:	694c      	ldr	r4, [r1, #20]
 8001760:	b10c      	cbz	r4, 8001766 <USB_EP0StartXfer+0x2e>
      ep->xfer_len = ep->maxpacket;
 8001762:	688c      	ldr	r4, [r1, #8]
 8001764:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8001766:	691c      	ldr	r4, [r3, #16]
 8001768:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800176c:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800176e:	691d      	ldr	r5, [r3, #16]
 8001770:	688c      	ldr	r4, [r1, #8]
 8001772:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8001776:	432c      	orrs	r4, r5
 8001778:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800177a:	2a01      	cmp	r2, #1
 800177c:	d065      	beq.n	800184a <USB_EP0StartXfer+0x112>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800177e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8001782:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001786:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800178a:	2000      	movs	r0, #0
 800178c:	bc70      	pop	{r4, r5, r6}
 800178e:	4770      	bx	lr
    if (ep->xfer_len == 0U)
 8001790:	694c      	ldr	r4, [r1, #20]
 8001792:	bb6c      	cbnz	r4, 80017f0 <USB_EP0StartXfer+0xb8>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8001794:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8001798:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800179c:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80017a0:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80017a4:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80017a8:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80017ac:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80017b0:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80017b4:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80017b8:	0ced      	lsrs	r5, r5, #19
 80017ba:	04ed      	lsls	r5, r5, #19
 80017bc:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 80017c0:	2a01      	cmp	r2, #1
 80017c2:	d033      	beq.n	800182c <USB_EP0StartXfer+0xf4>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80017c4:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80017c8:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80017cc:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80017d0:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 80017d4:	694b      	ldr	r3, [r1, #20]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0d7      	beq.n	800178a <USB_EP0StartXfer+0x52>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80017da:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 80017de:	780b      	ldrb	r3, [r1, #0]
 80017e0:	f003 020f 	and.w	r2, r3, #15
 80017e4:	2301      	movs	r3, #1
 80017e6:	4093      	lsls	r3, r2
 80017e8:	4323      	orrs	r3, r4
 80017ea:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 80017ee:	e7cc      	b.n	800178a <USB_EP0StartXfer+0x52>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80017f0:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80017f4:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 80017f8:	6925      	ldr	r5, [r4, #16]
 80017fa:	0ced      	lsrs	r5, r5, #19
 80017fc:	04ed      	lsls	r5, r5, #19
 80017fe:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8001800:	6925      	ldr	r5, [r4, #16]
 8001802:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8001806:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800180a:	6125      	str	r5, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 800180c:	688d      	ldr	r5, [r1, #8]
 800180e:	694e      	ldr	r6, [r1, #20]
 8001810:	42ae      	cmp	r6, r5
        ep->xfer_len = ep->maxpacket;
 8001812:	bf88      	it	hi
 8001814:	614d      	strhi	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8001816:	6925      	ldr	r5, [r4, #16]
 8001818:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800181c:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800181e:	6926      	ldr	r6, [r4, #16]
 8001820:	694d      	ldr	r5, [r1, #20]
 8001822:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8001826:	4335      	orrs	r5, r6
 8001828:	6125      	str	r5, [r4, #16]
 800182a:	e7c9      	b.n	80017c0 <USB_EP0StartXfer+0x88>
      if ((uint32_t)ep->dma_addr != 0U)
 800182c:	690a      	ldr	r2, [r1, #16]
 800182e:	b11a      	cbz	r2, 8001838 <USB_EP0StartXfer+0x100>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8001830:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8001834:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001838:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800183c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8001840:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8001844:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8001848:	e79f      	b.n	800178a <USB_EP0StartXfer+0x52>
      if ((uint32_t)ep->xfer_buff != 0U)
 800184a:	68ca      	ldr	r2, [r1, #12]
 800184c:	2a00      	cmp	r2, #0
 800184e:	d096      	beq.n	800177e <USB_EP0StartXfer+0x46>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8001850:	615a      	str	r2, [r3, #20]
 8001852:	e794      	b.n	800177e <USB_EP0StartXfer+0x46>

08001854 <USB_WritePacket>:
{
 8001854:	b410      	push	{r4}
 8001856:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 800185a:	b974      	cbnz	r4, 800187a <USB_WritePacket+0x26>
    count32b = ((uint32_t)len + 3U) / 4U;
 800185c:	3303      	adds	r3, #3
 800185e:	ea4f 0c93 	mov.w	ip, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8001862:	2b03      	cmp	r3, #3
 8001864:	d909      	bls.n	800187a <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8001866:	3201      	adds	r2, #1
 8001868:	eb00 3002 	add.w	r0, r0, r2, lsl #12
    for (i = 0U; i < count32b; i++)
 800186c:	2300      	movs	r3, #0
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800186e:	f851 2b04 	ldr.w	r2, [r1], #4
 8001872:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8001874:	3301      	adds	r3, #1
 8001876:	459c      	cmp	ip, r3
 8001878:	d8f9      	bhi.n	800186e <USB_WritePacket+0x1a>
}
 800187a:	2000      	movs	r0, #0
 800187c:	bc10      	pop	{r4}
 800187e:	4770      	bx	lr

08001880 <USB_EPStartXfer>:
{
 8001880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001882:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8001884:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8001886:	784c      	ldrb	r4, [r1, #1]
 8001888:	2c01      	cmp	r4, #1
 800188a:	d033      	beq.n	80018f4 <USB_EPStartXfer+0x74>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800188c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8001890:	f503 6c30 	add.w	ip, r3, #2816	; 0xb00
 8001894:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8001898:	0ce4      	lsrs	r4, r4, #19
 800189a:	04e4      	lsls	r4, r4, #19
 800189c:	f8cc 4010 	str.w	r4, [ip, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80018a0:	f8dc 4010 	ldr.w	r4, [ip, #16]
 80018a4:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 80018a8:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 80018ac:	f8cc 4010 	str.w	r4, [ip, #16]
    if (ep->xfer_len == 0U)
 80018b0:	694c      	ldr	r4, [r1, #20]
 80018b2:	2c00      	cmp	r4, #0
 80018b4:	f040 80bb 	bne.w	8001a2e <USB_EPStartXfer+0x1ae>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80018b8:	f8dc 5010 	ldr.w	r5, [ip, #16]
 80018bc:	688c      	ldr	r4, [r1, #8]
 80018be:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80018c2:	432c      	orrs	r4, r5
 80018c4:	f8cc 4010 	str.w	r4, [ip, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80018c8:	f8dc 4010 	ldr.w	r4, [ip, #16]
 80018cc:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80018d0:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 80018d4:	2a01      	cmp	r2, #1
 80018d6:	f000 80c4 	beq.w	8001a62 <USB_EPStartXfer+0x1e2>
    if (ep->type == EP_TYPE_ISOC)
 80018da:	78ca      	ldrb	r2, [r1, #3]
 80018dc:	2a01      	cmp	r2, #1
 80018de:	f000 80c7 	beq.w	8001a70 <USB_EPStartXfer+0x1f0>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80018e2:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80018e6:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80018ea:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 80018ee:	2000      	movs	r0, #0
 80018f0:	b003      	add	sp, #12
 80018f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 80018f4:	694c      	ldr	r4, [r1, #20]
 80018f6:	bb84      	cbnz	r4, 800195a <USB_EPStartXfer+0xda>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80018f8:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80018fc:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8001900:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8001904:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8001908:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800190c:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8001910:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8001914:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001918:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800191c:	0ced      	lsrs	r5, r5, #19
 800191e:	04ed      	lsls	r5, r5, #19
 8001920:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8001924:	2a01      	cmp	r2, #1
 8001926:	d04c      	beq.n	80019c2 <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001928:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800192c:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8001930:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8001934:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8001938:	78cc      	ldrb	r4, [r1, #3]
 800193a:	2c01      	cmp	r4, #1
 800193c:	d063      	beq.n	8001a06 <USB_EPStartXfer+0x186>
        if (ep->xfer_len > 0U)
 800193e:	694b      	ldr	r3, [r1, #20]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0d4      	beq.n	80018ee <USB_EPStartXfer+0x6e>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8001944:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 8001948:	780b      	ldrb	r3, [r1, #0]
 800194a:	f003 020f 	and.w	r2, r3, #15
 800194e:	2301      	movs	r3, #1
 8001950:	4093      	lsls	r3, r2
 8001952:	4323      	orrs	r3, r4
 8001954:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8001958:	e7c9      	b.n	80018ee <USB_EPStartXfer+0x6e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800195a:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800195e:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8001962:	0ced      	lsrs	r5, r5, #19
 8001964:	04ed      	lsls	r5, r5, #19
 8001966:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800196a:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800196e:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8001972:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8001976:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800197a:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800197e:	688e      	ldr	r6, [r1, #8]
 8001980:	694d      	ldr	r5, [r1, #20]
 8001982:	4435      	add	r5, r6
 8001984:	3d01      	subs	r5, #1
 8001986:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800198a:	4e40      	ldr	r6, [pc, #256]	; (8001a8c <USB_EPStartXfer+0x20c>)
 800198c:	ea06 45c5 	and.w	r5, r6, r5, lsl #19
 8001990:	433d      	orrs	r5, r7
 8001992:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8001996:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800199a:	694d      	ldr	r5, [r1, #20]
 800199c:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80019a0:	4335      	orrs	r5, r6
 80019a2:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80019a6:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 80019aa:	78cd      	ldrb	r5, [r1, #3]
 80019ac:	2d01      	cmp	r5, #1
 80019ae:	d1b9      	bne.n	8001924 <USB_EPStartXfer+0xa4>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80019b0:	6925      	ldr	r5, [r4, #16]
 80019b2:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 80019b6:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80019b8:	6925      	ldr	r5, [r4, #16]
 80019ba:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80019be:	6125      	str	r5, [r4, #16]
 80019c0:	e7b0      	b.n	8001924 <USB_EPStartXfer+0xa4>
      if ((uint32_t)ep->dma_addr != 0U)
 80019c2:	690a      	ldr	r2, [r1, #16]
 80019c4:	b11a      	cbz	r2, 80019ce <USB_EPStartXfer+0x14e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80019c6:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80019ca:	f8c4 2914 	str.w	r2, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 80019ce:	78ca      	ldrb	r2, [r1, #3]
 80019d0:	2a01      	cmp	r2, #1
 80019d2:	d008      	beq.n	80019e6 <USB_EPStartXfer+0x166>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80019d4:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80019d8:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80019dc:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80019e0:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 80019e4:	e783      	b.n	80018ee <USB_EPStartXfer+0x6e>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80019e6:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 80019ea:	f412 7f80 	tst.w	r2, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80019ee:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 80019f2:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 80019f6:	bf0c      	ite	eq
 80019f8:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80019fc:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 8001a00:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8001a04:	e7e6      	b.n	80019d4 <USB_EPStartXfer+0x154>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8001a06:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8001a0a:	f414 7f80 	tst.w	r4, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8001a0e:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8001a12:	bf0c      	ite	eq
 8001a14:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8001a18:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 8001a1c:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8001a20:	9200      	str	r2, [sp, #0]
 8001a22:	8a8b      	ldrh	r3, [r1, #20]
 8001a24:	780a      	ldrb	r2, [r1, #0]
 8001a26:	68c9      	ldr	r1, [r1, #12]
 8001a28:	f7ff ff14 	bl	8001854 <USB_WritePacket>
 8001a2c:	e75f      	b.n	80018ee <USB_EPStartXfer+0x6e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8001a2e:	688d      	ldr	r5, [r1, #8]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8001a30:	f8dc 6010 	ldr.w	r6, [ip, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8001a34:	442c      	add	r4, r5
 8001a36:	3c01      	subs	r4, #1
 8001a38:	fbb4 f4f5 	udiv	r4, r4, r5
 8001a3c:	fa1f fe84 	uxth.w	lr, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8001a40:	4d12      	ldr	r5, [pc, #72]	; (8001a8c <USB_EPStartXfer+0x20c>)
 8001a42:	ea05 44c4 	and.w	r4, r5, r4, lsl #19
 8001a46:	4334      	orrs	r4, r6
 8001a48:	f8cc 4010 	str.w	r4, [ip, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8001a4c:	f8dc 5010 	ldr.w	r5, [ip, #16]
 8001a50:	688c      	ldr	r4, [r1, #8]
 8001a52:	fb04 f40e 	mul.w	r4, r4, lr
 8001a56:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8001a5a:	432c      	orrs	r4, r5
 8001a5c:	f8cc 4010 	str.w	r4, [ip, #16]
 8001a60:	e738      	b.n	80018d4 <USB_EPStartXfer+0x54>
      if ((uint32_t)ep->xfer_buff != 0U)
 8001a62:	68ca      	ldr	r2, [r1, #12]
 8001a64:	2a00      	cmp	r2, #0
 8001a66:	f43f af38 	beq.w	80018da <USB_EPStartXfer+0x5a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8001a6a:	f8cc 2014 	str.w	r2, [ip, #20]
 8001a6e:	e734      	b.n	80018da <USB_EPStartXfer+0x5a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8001a70:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8001a74:	f412 7f80 	tst.w	r2, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8001a78:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8001a7c:	bf0c      	ite	eq
 8001a7e:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8001a82:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 8001a86:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8001a8a:	e72a      	b.n	80018e2 <USB_EPStartXfer+0x62>
 8001a8c:	1ff80000 	.word	0x1ff80000

08001a90 <USB_ReadPacket>:
{
 8001a90:	b570      	push	{r4, r5, r6, lr}
 8001a92:	4606      	mov	r6, r0
  uint16_t remaining_bytes = len % 4U;
 8001a94:	f002 0503 	and.w	r5, r2, #3
  for (i = 0U; i < count32b; i++)
 8001a98:	ea5f 0c92 	movs.w	ip, r2, lsr #2
 8001a9c:	d01b      	beq.n	8001ad6 <USB_ReadPacket+0x46>
  uint8_t *pDest = dest;
 8001a9e:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 8001aa0:	2300      	movs	r3, #0
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8001aa2:	f500 5e80 	add.w	lr, r0, #4096	; 0x1000
 8001aa6:	f8de 4000 	ldr.w	r4, [lr]
 8001aaa:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 8001aae:	3301      	adds	r3, #1
 8001ab0:	459c      	cmp	ip, r3
 8001ab2:	d1f8      	bne.n	8001aa6 <USB_ReadPacket+0x16>
    pDest++;
 8001ab4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
  if (remaining_bytes != 0U)
 8001ab8:	b165      	cbz	r5, 8001ad4 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8001aba:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8001abe:	6834      	ldr	r4, [r6, #0]
 8001ac0:	1941      	adds	r1, r0, r5
 8001ac2:	2300      	movs	r3, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8001ac4:	fa24 f203 	lsr.w	r2, r4, r3
 8001ac8:	f800 2b01 	strb.w	r2, [r0], #1
    } while (remaining_bytes != 0U);
 8001acc:	3308      	adds	r3, #8
 8001ace:	4288      	cmp	r0, r1
 8001ad0:	d1f8      	bne.n	8001ac4 <USB_ReadPacket+0x34>
      pDest++;
 8001ad2:	4608      	mov	r0, r1
}
 8001ad4:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 8001ad6:	4608      	mov	r0, r1
 8001ad8:	e7ee      	b.n	8001ab8 <USB_ReadPacket+0x28>

08001ada <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8001ada:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8001adc:	784a      	ldrb	r2, [r1, #1]
 8001ade:	2a01      	cmp	r2, #1
 8001ae0:	d014      	beq.n	8001b0c <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8001ae2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8001ae6:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8001aea:	2a00      	cmp	r2, #0
 8001aec:	db06      	blt.n	8001afc <USB_EPSetStall+0x22>
 8001aee:	b12b      	cbz	r3, 8001afc <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8001af0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8001af4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001af8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8001afc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8001b00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b04:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8001b08:	2000      	movs	r0, #0
 8001b0a:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8001b0c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8001b10:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8001b14:	2a00      	cmp	r2, #0
 8001b16:	db06      	blt.n	8001b26 <USB_EPSetStall+0x4c>
 8001b18:	b12b      	cbz	r3, 8001b26 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8001b1a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8001b1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001b22:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8001b26:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8001b2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b2e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8001b32:	e7e9      	b.n	8001b08 <USB_EPSetStall+0x2e>

08001b34 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8001b34:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8001b36:	784a      	ldrb	r2, [r1, #1]
 8001b38:	2a01      	cmp	r2, #1
 8001b3a:	d00e      	beq.n	8001b5a <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b3c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8001b40:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8001b44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b48:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8001b4c:	78cb      	ldrb	r3, [r1, #3]
 8001b4e:	3b02      	subs	r3, #2
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d915      	bls.n	8001b82 <USB_EPClearStall+0x4e>
}
 8001b56:	2000      	movs	r0, #0
 8001b58:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b5a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8001b5e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8001b62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b66:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8001b6a:	78cb      	ldrb	r3, [r1, #3]
 8001b6c:	3b02      	subs	r3, #2
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d8f0      	bhi.n	8001b56 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8001b74:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8001b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8001b80:	e7e9      	b.n	8001b56 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8001b82:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8001b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8001b8e:	e7e2      	b.n	8001b56 <USB_EPClearStall+0x22>

08001b90 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8001b90:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001b94:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001b98:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8001b9c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001ba0:	0109      	lsls	r1, r1, #4
 8001ba2:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8001ba6:	4319      	orrs	r1, r3
 8001ba8:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8001bac:	2000      	movs	r0, #0
 8001bae:	4770      	bx	lr

08001bb0 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8001bb0:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8001bb4:	f023 0303 	bic.w	r3, r3, #3
 8001bb8:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8001bbc:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8001bc0:	f023 0302 	bic.w	r3, r3, #2
 8001bc4:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8001bc8:	2000      	movs	r0, #0
 8001bca:	4770      	bx	lr

08001bcc <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8001bcc:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8001bd0:	f023 0303 	bic.w	r3, r3, #3
 8001bd4:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8001bd8:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8001bdc:	f043 0302 	orr.w	r3, r3, #2
 8001be0:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8001be4:	2000      	movs	r0, #0
 8001be6:	4770      	bx	lr

08001be8 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8001be8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8001bea:	6980      	ldr	r0, [r0, #24]
}
 8001bec:	4010      	ands	r0, r2
 8001bee:	4770      	bx	lr

08001bf0 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8001bf0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8001bf4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8001bf8:	69c0      	ldr	r0, [r0, #28]
 8001bfa:	4018      	ands	r0, r3
}
 8001bfc:	0c00      	lsrs	r0, r0, #16
 8001bfe:	4770      	bx	lr

08001c00 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8001c00:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8001c04:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8001c08:	69c0      	ldr	r0, [r0, #28]
 8001c0a:	4018      	ands	r0, r3
}
 8001c0c:	b280      	uxth	r0, r0
 8001c0e:	4770      	bx	lr

08001c10 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8001c10:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8001c14:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8001c18:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8001c1c:	6940      	ldr	r0, [r0, #20]
}
 8001c1e:	4010      	ands	r0, r2
 8001c20:	4770      	bx	lr

08001c22 <USB_ReadDevInEPInterrupt>:
{
 8001c22:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 8001c24:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8001c28:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8001c2c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8001c30:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8001c34:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8001c36:	f001 010f 	and.w	r1, r1, #15
 8001c3a:	40cb      	lsrs	r3, r1
 8001c3c:	01db      	lsls	r3, r3, #7
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	4323      	orrs	r3, r4
}
 8001c42:	4018      	ands	r0, r3
 8001c44:	bc10      	pop	{r4}
 8001c46:	4770      	bx	lr

08001c48 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8001c48:	6940      	ldr	r0, [r0, #20]
}
 8001c4a:	f000 0001 	and.w	r0, r0, #1
 8001c4e:	4770      	bx	lr

08001c50 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8001c50:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8001c54:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c58:	f023 0307 	bic.w	r3, r3, #7
 8001c5c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8001c60:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8001c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c68:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	4770      	bx	lr

08001c70 <USB_EP0_OutStart>:
{
 8001c70:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001c72:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8001c74:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <USB_EP0_OutStart+0x58>)
 8001c76:	429c      	cmp	r4, r3
 8001c78:	d903      	bls.n	8001c82 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8001c7a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	db16      	blt.n	8001cb0 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8001c82:	2400      	movs	r4, #0
 8001c84:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8001c88:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8001c8c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001c90:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8001c94:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8001c98:	f044 0418 	orr.w	r4, r4, #24
 8001c9c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8001ca0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8001ca4:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8001ca8:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 8001cac:	2901      	cmp	r1, #1
 8001cae:	d002      	beq.n	8001cb6 <USB_EP0_OutStart+0x46>
}
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	bc10      	pop	{r4}
 8001cb4:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8001cb6:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8001cba:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8001cbe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8001cc2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8001cc6:	e7f3      	b.n	8001cb0 <USB_EP0_OutStart+0x40>
 8001cc8:	4f54300a 	.word	0x4f54300a

08001ccc <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001ccc:	4b01      	ldr	r3, [pc, #4]	; (8001cd4 <LL_SetSystemCoreClock+0x8>)
 8001cce:	6018      	str	r0, [r3, #0]
}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20000000 	.word	0x20000000

08001cd8 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8001cd8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8001cdc:	b183      	cbz	r3, 8001d00 <USBD_CDC_EP0_RxReady+0x28>
{
 8001cde:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8001ce0:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8001ce4:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8001ce8:	28ff      	cmp	r0, #255	; 0xff
 8001cea:	d007      	beq.n	8001cfc <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8001cf6:	23ff      	movs	r3, #255	; 0xff
 8001cf8:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	bd10      	pop	{r4, pc}
 8001d00:	2000      	movs	r0, #0
 8001d02:	4770      	bx	lr

08001d04 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8001d04:	2343      	movs	r3, #67	; 0x43
 8001d06:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8001d08:	4800      	ldr	r0, [pc, #0]	; (8001d0c <USBD_CDC_GetFSCfgDesc+0x8>)
 8001d0a:	4770      	bx	lr
 8001d0c:	20000044 	.word	0x20000044

08001d10 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8001d10:	2343      	movs	r3, #67	; 0x43
 8001d12:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8001d14:	4800      	ldr	r0, [pc, #0]	; (8001d18 <USBD_CDC_GetHSCfgDesc+0x8>)
 8001d16:	4770      	bx	lr
 8001d18:	20000088 	.word	0x20000088

08001d1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8001d1c:	2343      	movs	r3, #67	; 0x43
 8001d1e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8001d20:	4800      	ldr	r0, [pc, #0]	; (8001d24 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8001d22:	4770      	bx	lr
 8001d24:	200000d8 	.word	0x200000d8

08001d28 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8001d28:	230a      	movs	r3, #10
 8001d2a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8001d2c:	4800      	ldr	r0, [pc, #0]	; (8001d30 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8001d2e:	4770      	bx	lr
 8001d30:	200000cc 	.word	0x200000cc

08001d34 <USBD_CDC_DataOut>:
{
 8001d34:	b538      	push	{r3, r4, r5, lr}
 8001d36:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8001d38:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8001d3c:	f000 ffba 	bl	8002cb4 <USBD_LL_GetRxDataSize>
 8001d40:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8001d44:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8001d48:	b14b      	cbz	r3, 8001d5e <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8001d4a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8001d54:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8001d58:	4798      	blx	r3
    return USBD_OK;
 8001d5a:	2000      	movs	r0, #0
}
 8001d5c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8001d5e:	2002      	movs	r0, #2
 8001d60:	e7fc      	b.n	8001d5c <USBD_CDC_DataOut+0x28>

08001d62 <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8001d62:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8001d66:	b312      	cbz	r2, 8001dae <USBD_CDC_DataIn+0x4c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8001d68:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8001d6c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	b1f3      	cbz	r3, 8001db2 <USBD_CDC_DataIn+0x50>
{
 8001d74:	b510      	push	{r4, lr}
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8001d76:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8001d7a:	ebc1 0cc1 	rsb	ip, r1, r1, lsl #3
 8001d7e:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 8001d82:	6c64      	ldr	r4, [r4, #68]	; 0x44
 8001d84:	fbb3 fcf4 	udiv	ip, r3, r4
 8001d88:	fb04 331c 	mls	r3, r4, ip, r3
 8001d8c:	b11b      	cbz	r3, 8001d96 <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
}
 8001d94:	bd10      	pop	{r4, pc}
      pdev->ep_in[epnum].total_length = 0U;
 8001d96:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8001d9a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001d9e:	2400      	movs	r4, #0
 8001da0:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8001da2:	4623      	mov	r3, r4
 8001da4:	4622      	mov	r2, r4
 8001da6:	f000 ffc5 	bl	8002d34 <USBD_LL_Transmit>
    return USBD_OK;
 8001daa:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8001dac:	e7f2      	b.n	8001d94 <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 8001dae:	2002      	movs	r0, #2
 8001db0:	4770      	bx	lr
      hcdc->TxState = 0U;
 8001db2:	2000      	movs	r0, #0
 8001db4:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
}
 8001db8:	4770      	bx	lr

08001dba <USBD_CDC_Setup>:
{
 8001dba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	4606      	mov	r6, r0
 8001dc0:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8001dc2:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8001dcc:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001dd0:	780b      	ldrb	r3, [r1, #0]
 8001dd2:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8001dd6:	d027      	beq.n	8001e28 <USBD_CDC_Setup+0x6e>
 8001dd8:	2d20      	cmp	r5, #32
 8001dda:	d153      	bne.n	8001e84 <USBD_CDC_Setup+0xca>
      if (req->wLength)
 8001ddc:	88ca      	ldrh	r2, [r1, #6]
 8001dde:	b1da      	cbz	r2, 8001e18 <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 8001de0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001de4:	d00c      	beq.n	8001e00 <USBD_CDC_Setup+0x46>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001de6:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	4639      	mov	r1, r7
 8001dee:	7860      	ldrb	r0, [r4, #1]
 8001df0:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8001df2:	88e2      	ldrh	r2, [r4, #6]
 8001df4:	4639      	mov	r1, r7
 8001df6:	4630      	mov	r0, r6
 8001df8:	f000 fd5c 	bl	80028b4 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8001dfc:	2500      	movs	r5, #0
 8001dfe:	e044      	b.n	8001e8a <USBD_CDC_Setup+0xd0>
          hcdc->CmdOpCode = req->bRequest;
 8001e00:	784b      	ldrb	r3, [r1, #1]
 8001e02:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8001e06:	88cb      	ldrh	r3, [r1, #6]
 8001e08:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8001e0c:	88ca      	ldrh	r2, [r1, #6]
 8001e0e:	4639      	mov	r1, r7
 8001e10:	f000 fd65 	bl	80028de <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8001e14:	2500      	movs	r5, #0
 8001e16:	e038      	b.n	8001e8a <USBD_CDC_Setup+0xd0>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001e18:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	7848      	ldrb	r0, [r1, #1]
 8001e22:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 8001e24:	2500      	movs	r5, #0
 8001e26:	e030      	b.n	8001e8a <USBD_CDC_Setup+0xd0>
      switch (req->bRequest)
 8001e28:	784f      	ldrb	r7, [r1, #1]
 8001e2a:	2f0a      	cmp	r7, #10
 8001e2c:	d014      	beq.n	8001e58 <USBD_CDC_Setup+0x9e>
 8001e2e:	2f0b      	cmp	r7, #11
 8001e30:	d020      	beq.n	8001e74 <USBD_CDC_Setup+0xba>
 8001e32:	b11f      	cbz	r7, 8001e3c <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 8001e34:	f000 fa50 	bl	80022d8 <USBD_CtlError>
          ret = USBD_FAIL;
 8001e38:	2502      	movs	r5, #2
          break;
 8001e3a:	e026      	b.n	8001e8a <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001e3c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d003      	beq.n	8001e4c <USBD_CDC_Setup+0x92>
            USBD_CtlError(pdev, req);
 8001e44:	f000 fa48 	bl	80022d8 <USBD_CtlError>
            ret = USBD_FAIL;
 8001e48:	2502      	movs	r5, #2
 8001e4a:	e01e      	b.n	8001e8a <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	a901      	add	r1, sp, #4
 8001e50:	f000 fd30 	bl	80028b4 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8001e54:	463d      	mov	r5, r7
 8001e56:	e018      	b.n	8001e8a <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001e58:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d003      	beq.n	8001e68 <USBD_CDC_Setup+0xae>
            USBD_CtlError(pdev, req);
 8001e60:	f000 fa3a 	bl	80022d8 <USBD_CtlError>
            ret = USBD_FAIL;
 8001e64:	2502      	movs	r5, #2
 8001e66:	e010      	b.n	8001e8a <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f10d 0107 	add.w	r1, sp, #7
 8001e6e:	f000 fd21 	bl	80028b4 <USBD_CtlSendData>
 8001e72:	e00a      	b.n	8001e8a <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8001e74:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d006      	beq.n	8001e8a <USBD_CDC_Setup+0xd0>
            USBD_CtlError(pdev, req);
 8001e7c:	f000 fa2c 	bl	80022d8 <USBD_CtlError>
            ret = USBD_FAIL;
 8001e80:	2502      	movs	r5, #2
 8001e82:	e002      	b.n	8001e8a <USBD_CDC_Setup+0xd0>
      USBD_CtlError(pdev, req);
 8001e84:	f000 fa28 	bl	80022d8 <USBD_CtlError>
      ret = USBD_FAIL;
 8001e88:	2502      	movs	r5, #2
}
 8001e8a:	4628      	mov	r0, r5
 8001e8c:	b003      	add	sp, #12
 8001e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e90 <USBD_CDC_DeInit>:
{
 8001e90:	b538      	push	{r3, r4, r5, lr}
 8001e92:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8001e94:	2181      	movs	r1, #129	; 0x81
 8001e96:	f000 ff2d 	bl	8002cf4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8001e9a:	2500      	movs	r5, #0
 8001e9c:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	f000 ff27 	bl	8002cf4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8001ea6:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8001eaa:	2182      	movs	r1, #130	; 0x82
 8001eac:	4620      	mov	r0, r4
 8001eae:	f000 ff21 	bl	8002cf4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8001eb2:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8001eb4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8001eb8:	b14b      	cbz	r3, 8001ece <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8001eba:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8001ec2:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8001ec6:	f000 ff9b 	bl	8002e00 <free>
    pdev->pClassData = NULL;
 8001eca:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8001ece:	2000      	movs	r0, #0
 8001ed0:	bd38      	pop	{r3, r4, r5, pc}

08001ed2 <USBD_CDC_Init>:
{
 8001ed2:	b538      	push	{r3, r4, r5, lr}
 8001ed4:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8001ed6:	7c03      	ldrb	r3, [r0, #16]
 8001ed8:	bbcb      	cbnz	r3, 8001f4e <USBD_CDC_Init+0x7c>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8001eda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ede:	2202      	movs	r2, #2
 8001ee0:	2181      	movs	r1, #129	; 0x81
 8001ee2:	f000 fefc 	bl	8002cde <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8001ee6:	2501      	movs	r5, #1
 8001ee8:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8001eea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eee:	2202      	movs	r2, #2
 8001ef0:	4629      	mov	r1, r5
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	f000 fef3 	bl	8002cde <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8001ef8:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8001efc:	2308      	movs	r3, #8
 8001efe:	2203      	movs	r2, #3
 8001f00:	2182      	movs	r1, #130	; 0x82
 8001f02:	4620      	mov	r0, r4
 8001f04:	f000 feeb 	bl	8002cde <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	6423      	str	r3, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8001f0c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8001f10:	f000 ff6e 	bl	8002df0 <malloc>
 8001f14:	4605      	mov	r5, r0
 8001f16:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  memset(pdev->pClassData,0,sizeof(USBD_CDC_HandleTypeDef)); // THIS LINE WAS ADDED
 8001f1a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8001f1e:	2100      	movs	r1, #0
 8001f20:	f000 ff76 	bl	8002e10 <memset>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8001f24:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4798      	blx	r3
    hcdc->TxState = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8001f32:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8001f36:	7c23      	ldrb	r3, [r4, #16]
 8001f38:	b9cb      	cbnz	r3, 8001f6e <USBD_CDC_Init+0x9c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8001f3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f3e:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8001f42:	2101      	movs	r1, #1
 8001f44:	4620      	mov	r0, r4
 8001f46:	f000 fefd 	bl	8002d44 <USBD_LL_PrepareReceive>
}
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	bd38      	pop	{r3, r4, r5, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8001f4e:	2340      	movs	r3, #64	; 0x40
 8001f50:	2202      	movs	r2, #2
 8001f52:	2181      	movs	r1, #129	; 0x81
 8001f54:	f000 fec3 	bl	8002cde <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8001f58:	2501      	movs	r5, #1
 8001f5a:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8001f5c:	2340      	movs	r3, #64	; 0x40
 8001f5e:	2202      	movs	r2, #2
 8001f60:	4629      	mov	r1, r5
 8001f62:	4620      	mov	r0, r4
 8001f64:	f000 febb 	bl	8002cde <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8001f68:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 8001f6c:	e7c6      	b.n	8001efc <USBD_CDC_Init+0x2a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8001f6e:	2340      	movs	r3, #64	; 0x40
 8001f70:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8001f74:	2101      	movs	r1, #1
 8001f76:	4620      	mov	r0, r4
 8001f78:	f000 fee4 	bl	8002d44 <USBD_LL_PrepareReceive>
 8001f7c:	e7e5      	b.n	8001f4a <USBD_CDC_Init+0x78>

08001f7e <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8001f7e:	b119      	cbz	r1, 8001f88 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8001f80:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8001f84:	2000      	movs	r0, #0
 8001f86:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8001f88:	2002      	movs	r0, #2
  }

  return ret;
}
 8001f8a:	4770      	bx	lr

08001f8c <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8001f8c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
 8001f90:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8001f94:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 8001f98:	2000      	movs	r0, #0
 8001f9a:	4770      	bx	lr

08001f9c <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8001f9c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->RxBuffer = pbuff;
 8001fa0:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	4770      	bx	lr

08001fa8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8001fa8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8001faa:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8001fae:	b192      	cbz	r2, 8001fd6 <USBD_CDC_ReceivePacket+0x2e>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8001fb0:	7c04      	ldrb	r4, [r0, #16]
 8001fb2:	b944      	cbnz	r4, 8001fc6 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8001fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fb8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	f000 fec1 	bl	8002d44 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8001fc6:	2340      	movs	r3, #64	; 0x40
 8001fc8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8001fcc:	2101      	movs	r1, #1
 8001fce:	f000 feb9 	bl	8002d44 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8001fd2:	2400      	movs	r4, #0
 8001fd4:	e7f5      	b.n	8001fc2 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8001fd6:	2402      	movs	r4, #2
 8001fd8:	e7f3      	b.n	8001fc2 <USBD_CDC_ReceivePacket+0x1a>

08001fda <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8001fda:	b198      	cbz	r0, 8002004 <USBD_Init+0x2a>
{
 8001fdc:	b508      	push	{r3, lr}
 8001fde:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8001fe0:	f8d0 02b4 	ldr.w	r0, [r0, #692]	; 0x2b4
 8001fe4:	b110      	cbz	r0, 8001fec <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f8c3 02b4 	str.w	r0, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8001fec:	b109      	cbz	r1, 8001ff2 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8001fee:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8001ff8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 fe18 	bl	8002c30 <USBD_LL_Init>

  return USBD_OK;
 8002000:	2000      	movs	r0, #0
}
 8002002:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8002004:	2002      	movs	r0, #2
}
 8002006:	4770      	bx	lr

08002008 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8002008:	b119      	cbz	r1, 8002012 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800200a:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 800200e:	2000      	movs	r0, #0
 8002010:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8002012:	2002      	movs	r0, #2
  }

  return status;
}
 8002014:	4770      	bx	lr

08002016 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8002016:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8002018:	f000 fe59 	bl	8002cce <USBD_LL_Start>

  return USBD_OK;
}
 800201c:	2000      	movs	r0, #0
 800201e:	bd08      	pop	{r3, pc}

08002020 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002020:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8002022:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002026:	b12b      	cbz	r3, 8002034 <USBD_SetClassConfig+0x14>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_FAIL;
 800202c:	2800      	cmp	r0, #0
 800202e:	bf18      	it	ne
 8002030:	2002      	movne	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8002032:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8002034:	2002      	movs	r0, #2
 8002036:	e7fc      	b.n	8002032 <USBD_SetClassConfig+0x12>

08002038 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002038:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800203a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	4798      	blx	r3

  return USBD_OK;
}
 8002042:	2000      	movs	r0, #0
 8002044:	bd08      	pop	{r3, pc}

08002046 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002046:	b538      	push	{r3, r4, r5, lr}
 8002048:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800204a:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 800204e:	4628      	mov	r0, r5
 8002050:	f000 f92e 	bl	80022b0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8002054:	2301      	movs	r3, #1
 8002056:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800205a:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 800205e:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8002062:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 8002066:	f001 031f 	and.w	r3, r1, #31
 800206a:	2b01      	cmp	r3, #1
 800206c:	d00e      	beq.n	800208c <USBD_LL_SetupStage+0x46>
 800206e:	2b02      	cmp	r3, #2
 8002070:	d011      	beq.n	8002096 <USBD_LL_SetupStage+0x50>
 8002072:	b12b      	cbz	r3, 8002080 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8002074:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002078:	4620      	mov	r0, r4
 800207a:	f000 fe43 	bl	8002d04 <USBD_LL_StallEP>
      break;
 800207e:	e003      	b.n	8002088 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8002080:	4629      	mov	r1, r5
 8002082:	4620      	mov	r0, r4
 8002084:	f000 f932 	bl	80022ec <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8002088:	2000      	movs	r0, #0
 800208a:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800208c:	4629      	mov	r1, r5
 800208e:	4620      	mov	r0, r4
 8002090:	f000 fae6 	bl	8002660 <USBD_StdItfReq>
      break;
 8002094:	e7f8      	b.n	8002088 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8002096:	4629      	mov	r1, r5
 8002098:	4620      	mov	r0, r4
 800209a:	f000 fb11 	bl	80026c0 <USBD_StdEPReq>
      break;
 800209e:	e7f3      	b.n	8002088 <USBD_LL_SetupStage+0x42>

080020a0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80020a0:	b538      	push	{r3, r4, r5, lr}
 80020a2:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80020a4:	460d      	mov	r5, r1
 80020a6:	bb81      	cbnz	r1, 800210a <USBD_LL_DataOutStage+0x6a>
 80020a8:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80020aa:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80020ae:	2a03      	cmp	r2, #3
 80020b0:	d003      	beq.n	80020ba <USBD_LL_DataOutStage+0x1a>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80020b2:	2a05      	cmp	r2, #5
 80020b4:	d022      	beq.n	80020fc <USBD_LL_DataOutStage+0x5c>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80020b6:	4608      	mov	r0, r1
 80020b8:	e031      	b.n	800211e <USBD_LL_DataOutStage+0x7e>
      if (pep->rem_length > pep->maxpacket)
 80020ba:	f8d0 1160 	ldr.w	r1, [r0, #352]	; 0x160
 80020be:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 80020c2:	4291      	cmp	r1, r2
 80020c4:	d90b      	bls.n	80020de <USBD_LL_DataOutStage+0x3e>
        pep->rem_length -= pep->maxpacket;
 80020c6:	1a89      	subs	r1, r1, r2
 80020c8:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 80020cc:	428a      	cmp	r2, r1
 80020ce:	bf8c      	ite	hi
 80020d0:	b28a      	uxthhi	r2, r1
 80020d2:	b292      	uxthls	r2, r2
 80020d4:	4619      	mov	r1, r3
 80020d6:	f000 fc11 	bl	80028fc <USBD_CtlContinueRx>
  return USBD_OK;
 80020da:	4628      	mov	r0, r5
 80020dc:	e01f      	b.n	800211e <USBD_LL_DataOutStage+0x7e>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80020de:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	b11b      	cbz	r3, 80020ee <USBD_LL_DataOutStage+0x4e>
 80020e6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80020ea:	2a03      	cmp	r2, #3
 80020ec:	d004      	beq.n	80020f8 <USBD_LL_DataOutStage+0x58>
        USBD_CtlSendStatus(pdev);
 80020ee:	4620      	mov	r0, r4
 80020f0:	f000 fc0c 	bl	800290c <USBD_CtlSendStatus>
  return USBD_OK;
 80020f4:	4628      	mov	r0, r5
 80020f6:	e012      	b.n	800211e <USBD_LL_DataOutStage+0x7e>
          pdev->pClass->EP0_RxReady(pdev);
 80020f8:	4798      	blx	r3
 80020fa:	e7f8      	b.n	80020ee <USBD_LL_DataOutStage+0x4e>
        pdev->ep0_state = USBD_EP0_IDLE;
 80020fc:	2100      	movs	r1, #0
 80020fe:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8002102:	f000 fdff 	bl	8002d04 <USBD_LL_StallEP>
  return USBD_OK;
 8002106:	4628      	mov	r0, r5
 8002108:	e009      	b.n	800211e <USBD_LL_DataOutStage+0x7e>
  else if ((pdev->pClass->DataOut != NULL) &&
 800210a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	b133      	cbz	r3, 8002120 <USBD_LL_DataOutStage+0x80>
 8002112:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002116:	2a03      	cmp	r2, #3
 8002118:	d104      	bne.n	8002124 <USBD_LL_DataOutStage+0x84>
    pdev->pClass->DataOut(pdev, epnum);
 800211a:	4798      	blx	r3
  return USBD_OK;
 800211c:	2000      	movs	r0, #0
}
 800211e:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8002120:	2002      	movs	r0, #2
 8002122:	e7fc      	b.n	800211e <USBD_LL_DataOutStage+0x7e>
 8002124:	2002      	movs	r0, #2
 8002126:	e7fa      	b.n	800211e <USBD_LL_DataOutStage+0x7e>

08002128 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8002128:	b538      	push	{r3, r4, r5, lr}
 800212a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800212c:	460d      	mov	r5, r1
 800212e:	2900      	cmp	r1, #0
 8002130:	d152      	bne.n	80021d8 <USBD_LL_DataInStage+0xb0>
 8002132:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8002134:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8002138:	2a02      	cmp	r2, #2
 800213a:	d00b      	beq.n	8002154 <USBD_LL_DataInStage+0x2c>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800213c:	f032 0304 	bics.w	r3, r2, #4
 8002140:	d102      	bne.n	8002148 <USBD_LL_DataInStage+0x20>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8002142:	2180      	movs	r1, #128	; 0x80
 8002144:	f000 fdde 	bl	8002d04 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8002148:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800214c:	2b01      	cmp	r3, #1
 800214e:	d03e      	beq.n	80021ce <USBD_LL_DataInStage+0xa6>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8002150:	4628      	mov	r0, r5
}
 8002152:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8002154:	6a01      	ldr	r1, [r0, #32]
 8002156:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002158:	4291      	cmp	r1, r2
 800215a:	d81b      	bhi.n	8002194 <USBD_LL_DataInStage+0x6c>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800215c:	69c1      	ldr	r1, [r0, #28]
 800215e:	fbb1 f3f2 	udiv	r3, r1, r2
 8002162:	fb02 1313 	mls	r3, r2, r3, r1
 8002166:	b92b      	cbnz	r3, 8002174 <USBD_LL_DataInStage+0x4c>
 8002168:	428a      	cmp	r2, r1
 800216a:	d803      	bhi.n	8002174 <USBD_LL_DataInStage+0x4c>
            (pep->total_length >= pep->maxpacket) &&
 800216c:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8002170:	4299      	cmp	r1, r3
 8002172:	d31c      	bcc.n	80021ae <USBD_LL_DataInStage+0x86>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8002174:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	b11b      	cbz	r3, 8002184 <USBD_LL_DataInStage+0x5c>
 800217c:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8002180:	2a03      	cmp	r2, #3
 8002182:	d021      	beq.n	80021c8 <USBD_LL_DataInStage+0xa0>
          USBD_LL_StallEP(pdev, 0x80U);
 8002184:	2180      	movs	r1, #128	; 0x80
 8002186:	4620      	mov	r0, r4
 8002188:	f000 fdbc 	bl	8002d04 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800218c:	4620      	mov	r0, r4
 800218e:	f000 fbc8 	bl	8002922 <USBD_CtlReceiveStatus>
 8002192:	e7d9      	b.n	8002148 <USBD_LL_DataInStage+0x20>
        pep->rem_length -= pep->maxpacket;
 8002194:	1a8a      	subs	r2, r1, r2
 8002196:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8002198:	b292      	uxth	r2, r2
 800219a:	4619      	mov	r1, r3
 800219c:	f000 fb97 	bl	80028ce <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80021a0:	2300      	movs	r3, #0
 80021a2:	461a      	mov	r2, r3
 80021a4:	4619      	mov	r1, r3
 80021a6:	4620      	mov	r0, r4
 80021a8:	f000 fdcc 	bl	8002d44 <USBD_LL_PrepareReceive>
 80021ac:	e7cc      	b.n	8002148 <USBD_LL_DataInStage+0x20>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80021ae:	2200      	movs	r2, #0
 80021b0:	4611      	mov	r1, r2
 80021b2:	f000 fb8c 	bl	80028ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80021b6:	2100      	movs	r1, #0
 80021b8:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80021bc:	460b      	mov	r3, r1
 80021be:	460a      	mov	r2, r1
 80021c0:	4620      	mov	r0, r4
 80021c2:	f000 fdbf 	bl	8002d44 <USBD_LL_PrepareReceive>
 80021c6:	e7bf      	b.n	8002148 <USBD_LL_DataInStage+0x20>
            pdev->pClass->EP0_TxSent(pdev);
 80021c8:	4620      	mov	r0, r4
 80021ca:	4798      	blx	r3
 80021cc:	e7da      	b.n	8002184 <USBD_LL_DataInStage+0x5c>
      pdev->dev_test_mode = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 80021d4:	4628      	mov	r0, r5
 80021d6:	e7bc      	b.n	8002152 <USBD_LL_DataInStage+0x2a>
  else if ((pdev->pClass->DataIn != NULL) &&
 80021d8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	b133      	cbz	r3, 80021ee <USBD_LL_DataInStage+0xc6>
 80021e0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80021e4:	2a03      	cmp	r2, #3
 80021e6:	d104      	bne.n	80021f2 <USBD_LL_DataInStage+0xca>
    pdev->pClass->DataIn(pdev, epnum);
 80021e8:	4798      	blx	r3
  return USBD_OK;
 80021ea:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 80021ec:	e7b1      	b.n	8002152 <USBD_LL_DataInStage+0x2a>
    return USBD_FAIL;
 80021ee:	2002      	movs	r0, #2
 80021f0:	e7af      	b.n	8002152 <USBD_LL_DataInStage+0x2a>
 80021f2:	2002      	movs	r0, #2
 80021f4:	e7ad      	b.n	8002152 <USBD_LL_DataInStage+0x2a>

080021f6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80021f6:	b570      	push	{r4, r5, r6, lr}
 80021f8:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80021fa:	2340      	movs	r3, #64	; 0x40
 80021fc:	2200      	movs	r2, #0
 80021fe:	4611      	mov	r1, r2
 8002200:	f000 fd6d 	bl	8002cde <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002204:	2501      	movs	r5, #1
 8002206:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800220a:	2640      	movs	r6, #64	; 0x40
 800220c:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002210:	4633      	mov	r3, r6
 8002212:	2200      	movs	r2, #0
 8002214:	2180      	movs	r1, #128	; 0x80
 8002216:	4620      	mov	r0, r4
 8002218:	f000 fd61 	bl	8002cde <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800221c:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800221e:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002220:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8002224:	2300      	movs	r3, #0
 8002226:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 800222a:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800222c:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4

  if (pdev->pClassData)
 8002230:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8002234:	b12b      	cbz	r3, 8002242 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002236:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2100      	movs	r1, #0
 800223e:	4620      	mov	r0, r4
 8002240:	4798      	blx	r3
  }

  return USBD_OK;
}
 8002242:	2000      	movs	r0, #0
 8002244:	bd70      	pop	{r4, r5, r6, pc}

08002246 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002246:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8002248:	2000      	movs	r0, #0
 800224a:	4770      	bx	lr

0800224c <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800224c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002250:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002254:	2304      	movs	r3, #4
 8002256:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800225a:	2000      	movs	r0, #0
 800225c:	4770      	bx	lr

0800225e <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800225e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002262:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8002264:	bf04      	itt	eq
 8002266:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 800226a:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800226e:	2000      	movs	r0, #0
 8002270:	4770      	bx	lr

08002272 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8002272:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002274:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002278:	2b03      	cmp	r3, #3
 800227a:	d001      	beq.n	8002280 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 800227c:	2000      	movs	r0, #0
 800227e:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8002280:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f8      	beq.n	800227c <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 800228a:	4798      	blx	r3
 800228c:	e7f6      	b.n	800227c <USBD_LL_SOF+0xa>

0800228e <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 800228e:	2000      	movs	r0, #0
 8002290:	4770      	bx	lr

08002292 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8002292:	2000      	movs	r0, #0
 8002294:	4770      	bx	lr

08002296 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8002296:	2000      	movs	r0, #0
 8002298:	4770      	bx	lr

0800229a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800229a:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800229c:	2201      	movs	r2, #1
 800229e:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80022a2:	f8d0 22b4 	ldr.w	r2, [r0, #692]	; 0x2b4
 80022a6:	6852      	ldr	r2, [r2, #4]
 80022a8:	7901      	ldrb	r1, [r0, #4]
 80022aa:	4790      	blx	r2

  return USBD_OK;
}
 80022ac:	2000      	movs	r0, #0
 80022ae:	bd08      	pop	{r3, pc}

080022b0 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest = *(uint8_t *)(pdata);
 80022b0:	780b      	ldrb	r3, [r1, #0]
 80022b2:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80022b4:	784b      	ldrb	r3, [r1, #1]
 80022b6:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80022b8:	78ca      	ldrb	r2, [r1, #3]
 80022ba:	788b      	ldrb	r3, [r1, #2]
 80022bc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80022c0:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80022c2:	794a      	ldrb	r2, [r1, #5]
 80022c4:	790b      	ldrb	r3, [r1, #4]
 80022c6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80022ca:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80022cc:	79ca      	ldrb	r2, [r1, #7]
 80022ce:	798b      	ldrb	r3, [r1, #6]
 80022d0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80022d4:	80c3      	strh	r3, [r0, #6]

}
 80022d6:	4770      	bx	lr

080022d8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80022d8:	b510      	push	{r4, lr}
 80022da:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80022dc:	2180      	movs	r1, #128	; 0x80
 80022de:	f000 fd11 	bl	8002d04 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80022e2:	2100      	movs	r1, #0
 80022e4:	4620      	mov	r0, r4
 80022e6:	f000 fd0d 	bl	8002d04 <USBD_LL_StallEP>
}
 80022ea:	bd10      	pop	{r4, pc}

080022ec <USBD_StdDevReq>:
{
 80022ec:	b530      	push	{r4, r5, lr}
 80022ee:	b083      	sub	sp, #12
 80022f0:	4605      	mov	r5, r0
 80022f2:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80022f4:	780b      	ldrb	r3, [r1, #0]
 80022f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80022fa:	2b20      	cmp	r3, #32
 80022fc:	d005      	beq.n	800230a <USBD_StdDevReq+0x1e>
 80022fe:	2b40      	cmp	r3, #64	; 0x40
 8002300:	d003      	beq.n	800230a <USBD_StdDevReq+0x1e>
 8002302:	b15b      	cbz	r3, 800231c <USBD_StdDevReq+0x30>
      USBD_CtlError(pdev, req);
 8002304:	f7ff ffe8 	bl	80022d8 <USBD_CtlError>
      break;
 8002308:	e005      	b.n	8002316 <USBD_StdDevReq+0x2a>
      pdev->pClass->Setup(pdev, req);
 800230a:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	4621      	mov	r1, r4
 8002312:	4628      	mov	r0, r5
 8002314:	4798      	blx	r3
}
 8002316:	2000      	movs	r0, #0
 8002318:	b003      	add	sp, #12
 800231a:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 800231c:	784b      	ldrb	r3, [r1, #1]
 800231e:	2b09      	cmp	r3, #9
 8002320:	f200 8198 	bhi.w	8002654 <USBD_StdDevReq+0x368>
 8002324:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002328:	0184015f 	.word	0x0184015f
 800232c:	017b0196 	.word	0x017b0196
 8002330:	00c90196 	.word	0x00c90196
 8002334:	0196000a 	.word	0x0196000a
 8002338:	00ee0140 	.word	0x00ee0140
  uint16_t len = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8002342:	884a      	ldrh	r2, [r1, #2]
 8002344:	0a13      	lsrs	r3, r2, #8
 8002346:	3b01      	subs	r3, #1
 8002348:	2b06      	cmp	r3, #6
 800234a:	f200 80a4 	bhi.w	8002496 <USBD_StdDevReq+0x1aa>
 800234e:	e8df f003 	tbb	[pc, r3]
 8002352:	1804      	.short	0x1804
 8002354:	86a2a22c 	.word	0x86a2a22c
 8002358:	93          	.byte	0x93
 8002359:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800235a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f10d 0106 	add.w	r1, sp, #6
 8002364:	7c00      	ldrb	r0, [r0, #16]
 8002366:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8002368:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800236c:	2a00      	cmp	r2, #0
 800236e:	f000 809f 	beq.w	80024b0 <USBD_StdDevReq+0x1c4>
 8002372:	88e3      	ldrh	r3, [r4, #6]
 8002374:	2b00      	cmp	r3, #0
 8002376:	f040 8092 	bne.w	800249e <USBD_StdDevReq+0x1b2>
      (void)USBD_CtlSendStatus(pdev);
 800237a:	4628      	mov	r0, r5
 800237c:	f000 fac6 	bl	800290c <USBD_CtlSendStatus>
 8002380:	e7c9      	b.n	8002316 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002382:	7c03      	ldrb	r3, [r0, #16]
 8002384:	b943      	cbnz	r3, 8002398 <USBD_StdDevReq+0xac>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8002386:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	f10d 0006 	add.w	r0, sp, #6
 8002390:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002392:	2302      	movs	r3, #2
 8002394:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8002396:	e7e7      	b.n	8002368 <USBD_StdDevReq+0x7c>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8002398:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800239c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239e:	f10d 0006 	add.w	r0, sp, #6
 80023a2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80023a4:	2302      	movs	r3, #2
 80023a6:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80023a8:	e7de      	b.n	8002368 <USBD_StdDevReq+0x7c>
      switch ((uint8_t)(req->wValue))
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	2a05      	cmp	r2, #5
 80023ae:	d852      	bhi.n	8002456 <USBD_StdDevReq+0x16a>
 80023b0:	e8df f002 	tbb	[pc, r2]
 80023b4:	2a1d1003 	.word	0x2a1d1003
 80023b8:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80023ba:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	b123      	cbz	r3, 80023cc <USBD_StdDevReq+0xe0>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80023c2:	f10d 0106 	add.w	r1, sp, #6
 80023c6:	7c00      	ldrb	r0, [r0, #16]
 80023c8:	4798      	blx	r3
  if (err != 0U)
 80023ca:	e7cd      	b.n	8002368 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 80023cc:	4621      	mov	r1, r4
 80023ce:	f7ff ff83 	bl	80022d8 <USBD_CtlError>
  if (err != 0U)
 80023d2:	e7a0      	b.n	8002316 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80023d4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	b123      	cbz	r3, 80023e6 <USBD_StdDevReq+0xfa>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80023dc:	f10d 0106 	add.w	r1, sp, #6
 80023e0:	7c00      	ldrb	r0, [r0, #16]
 80023e2:	4798      	blx	r3
  if (err != 0U)
 80023e4:	e7c0      	b.n	8002368 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 80023e6:	4621      	mov	r1, r4
 80023e8:	f7ff ff76 	bl	80022d8 <USBD_CtlError>
  if (err != 0U)
 80023ec:	e793      	b.n	8002316 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80023ee:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	b123      	cbz	r3, 8002400 <USBD_StdDevReq+0x114>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80023f6:	f10d 0106 	add.w	r1, sp, #6
 80023fa:	7c00      	ldrb	r0, [r0, #16]
 80023fc:	4798      	blx	r3
  if (err != 0U)
 80023fe:	e7b3      	b.n	8002368 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8002400:	4621      	mov	r1, r4
 8002402:	f7ff ff69 	bl	80022d8 <USBD_CtlError>
  if (err != 0U)
 8002406:	e786      	b.n	8002316 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8002408:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	b123      	cbz	r3, 800241a <USBD_StdDevReq+0x12e>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002410:	f10d 0106 	add.w	r1, sp, #6
 8002414:	7c00      	ldrb	r0, [r0, #16]
 8002416:	4798      	blx	r3
  if (err != 0U)
 8002418:	e7a6      	b.n	8002368 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 800241a:	4621      	mov	r1, r4
 800241c:	f7ff ff5c 	bl	80022d8 <USBD_CtlError>
  if (err != 0U)
 8002420:	e779      	b.n	8002316 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8002422:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	b123      	cbz	r3, 8002434 <USBD_StdDevReq+0x148>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800242a:	f10d 0106 	add.w	r1, sp, #6
 800242e:	7c00      	ldrb	r0, [r0, #16]
 8002430:	4798      	blx	r3
  if (err != 0U)
 8002432:	e799      	b.n	8002368 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8002434:	4621      	mov	r1, r4
 8002436:	f7ff ff4f 	bl	80022d8 <USBD_CtlError>
  if (err != 0U)
 800243a:	e76c      	b.n	8002316 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800243c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	b123      	cbz	r3, 800244e <USBD_StdDevReq+0x162>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002444:	f10d 0106 	add.w	r1, sp, #6
 8002448:	7c00      	ldrb	r0, [r0, #16]
 800244a:	4798      	blx	r3
  if (err != 0U)
 800244c:	e78c      	b.n	8002368 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 800244e:	4621      	mov	r1, r4
 8002450:	f7ff ff42 	bl	80022d8 <USBD_CtlError>
  if (err != 0U)
 8002454:	e75f      	b.n	8002316 <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 8002456:	4621      	mov	r1, r4
 8002458:	f7ff ff3e 	bl	80022d8 <USBD_CtlError>
  if (err != 0U)
 800245c:	e75b      	b.n	8002316 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800245e:	7c03      	ldrb	r3, [r0, #16]
 8002460:	b933      	cbnz	r3, 8002470 <USBD_StdDevReq+0x184>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002462:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002468:	f10d 0006 	add.w	r0, sp, #6
 800246c:	4798      	blx	r3
  if (err != 0U)
 800246e:	e77b      	b.n	8002368 <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 8002470:	4621      	mov	r1, r4
 8002472:	f7ff ff31 	bl	80022d8 <USBD_CtlError>
  if (err != 0U)
 8002476:	e74e      	b.n	8002316 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002478:	7c03      	ldrb	r3, [r0, #16]
 800247a:	b943      	cbnz	r3, 800248e <USBD_StdDevReq+0x1a2>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800247c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	f10d 0006 	add.w	r0, sp, #6
 8002486:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002488:	2307      	movs	r3, #7
 800248a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800248c:	e76c      	b.n	8002368 <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 800248e:	4621      	mov	r1, r4
 8002490:	f7ff ff22 	bl	80022d8 <USBD_CtlError>
  if (err != 0U)
 8002494:	e73f      	b.n	8002316 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8002496:	4621      	mov	r1, r4
 8002498:	f7ff ff1e 	bl	80022d8 <USBD_CtlError>
    return;
 800249c:	e73b      	b.n	8002316 <USBD_StdDevReq+0x2a>
      len = MIN(len, req->wLength);
 800249e:	429a      	cmp	r2, r3
 80024a0:	bf28      	it	cs
 80024a2:	461a      	movcs	r2, r3
 80024a4:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80024a8:	4601      	mov	r1, r0
 80024aa:	4628      	mov	r0, r5
 80024ac:	f000 fa02 	bl	80028b4 <USBD_CtlSendData>
    if (req->wLength == 0U)
 80024b0:	88e3      	ldrh	r3, [r4, #6]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f47f af2f 	bne.w	8002316 <USBD_StdDevReq+0x2a>
 80024b8:	e75f      	b.n	800237a <USBD_StdDevReq+0x8e>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80024ba:	888b      	ldrh	r3, [r1, #4]
 80024bc:	b9eb      	cbnz	r3, 80024fa <USBD_StdDevReq+0x20e>
 80024be:	88cb      	ldrh	r3, [r1, #6]
 80024c0:	b9db      	cbnz	r3, 80024fa <USBD_StdDevReq+0x20e>
 80024c2:	884b      	ldrh	r3, [r1, #2]
 80024c4:	2b7f      	cmp	r3, #127	; 0x7f
 80024c6:	d818      	bhi.n	80024fa <USBD_StdDevReq+0x20e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80024c8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80024cc:	2a03      	cmp	r2, #3
 80024ce:	d00d      	beq.n	80024ec <USBD_StdDevReq+0x200>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80024d0:	b2dc      	uxtb	r4, r3
      pdev->dev_address = dev_addr;
 80024d2:	f880 429e 	strb.w	r4, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80024d6:	4621      	mov	r1, r4
 80024d8:	f000 fc24 	bl	8002d24 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80024dc:	4628      	mov	r0, r5
 80024de:	f000 fa15 	bl	800290c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80024e2:	b134      	cbz	r4, 80024f2 <USBD_StdDevReq+0x206>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80024e4:	2302      	movs	r3, #2
 80024e6:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80024ea:	e714      	b.n	8002316 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 80024ec:	f7ff fef4 	bl	80022d8 <USBD_CtlError>
 80024f0:	e711      	b.n	8002316 <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80024f2:	2301      	movs	r3, #1
 80024f4:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80024f8:	e70d      	b.n	8002316 <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 80024fa:	4621      	mov	r1, r4
 80024fc:	4628      	mov	r0, r5
 80024fe:	f7ff feeb 	bl	80022d8 <USBD_CtlError>
 8002502:	e708      	b.n	8002316 <USBD_StdDevReq+0x2a>
  cfgidx = (uint8_t)(req->wValue);
 8002504:	788b      	ldrb	r3, [r1, #2]
 8002506:	4a55      	ldr	r2, [pc, #340]	; (800265c <USBD_StdDevReq+0x370>)
 8002508:	7013      	strb	r3, [r2, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800250a:	2b01      	cmp	r3, #1
 800250c:	d80d      	bhi.n	800252a <USBD_StdDevReq+0x23e>
    switch (pdev->dev_state)
 800250e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002512:	2a02      	cmp	r2, #2
 8002514:	d00c      	beq.n	8002530 <USBD_StdDevReq+0x244>
 8002516:	2a03      	cmp	r2, #3
 8002518:	d020      	beq.n	800255c <USBD_StdDevReq+0x270>
        USBD_CtlError(pdev, req);
 800251a:	f7ff fedd 	bl	80022d8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800251e:	4b4f      	ldr	r3, [pc, #316]	; (800265c <USBD_StdDevReq+0x370>)
 8002520:	7819      	ldrb	r1, [r3, #0]
 8002522:	4628      	mov	r0, r5
 8002524:	f7ff fd88 	bl	8002038 <USBD_ClrClassConfig>
        break;
 8002528:	e6f5      	b.n	8002316 <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 800252a:	f7ff fed5 	bl	80022d8 <USBD_CtlError>
 800252e:	e6f2      	b.n	8002316 <USBD_StdDevReq+0x2a>
        if (cfgidx)
 8002530:	b18b      	cbz	r3, 8002556 <USBD_StdDevReq+0x26a>
          pdev->dev_config = cfgidx;
 8002532:	2101      	movs	r1, #1
 8002534:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8002536:	2303      	movs	r3, #3
 8002538:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800253c:	f7ff fd70 	bl	8002020 <USBD_SetClassConfig>
 8002540:	2802      	cmp	r0, #2
 8002542:	d003      	beq.n	800254c <USBD_StdDevReq+0x260>
          USBD_CtlSendStatus(pdev);
 8002544:	4628      	mov	r0, r5
 8002546:	f000 f9e1 	bl	800290c <USBD_CtlSendStatus>
 800254a:	e6e4      	b.n	8002316 <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 800254c:	4621      	mov	r1, r4
 800254e:	4628      	mov	r0, r5
 8002550:	f7ff fec2 	bl	80022d8 <USBD_CtlError>
            return;
 8002554:	e6df      	b.n	8002316 <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 8002556:	f000 f9d9 	bl	800290c <USBD_CtlSendStatus>
 800255a:	e6dc      	b.n	8002316 <USBD_StdDevReq+0x2a>
        if (cfgidx == 0U)
 800255c:	b18b      	cbz	r3, 8002582 <USBD_StdDevReq+0x296>
        else if (cfgidx != pdev->dev_config)
 800255e:	6841      	ldr	r1, [r0, #4]
 8002560:	2901      	cmp	r1, #1
 8002562:	d01e      	beq.n	80025a2 <USBD_StdDevReq+0x2b6>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8002564:	b2c9      	uxtb	r1, r1
 8002566:	f7ff fd67 	bl	8002038 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800256a:	4b3c      	ldr	r3, [pc, #240]	; (800265c <USBD_StdDevReq+0x370>)
 800256c:	7819      	ldrb	r1, [r3, #0]
 800256e:	6069      	str	r1, [r5, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8002570:	4628      	mov	r0, r5
 8002572:	f7ff fd55 	bl	8002020 <USBD_SetClassConfig>
 8002576:	2802      	cmp	r0, #2
 8002578:	d00e      	beq.n	8002598 <USBD_StdDevReq+0x2ac>
          USBD_CtlSendStatus(pdev);
 800257a:	4628      	mov	r0, r5
 800257c:	f000 f9c6 	bl	800290c <USBD_CtlSendStatus>
 8002580:	e6c9      	b.n	8002316 <USBD_StdDevReq+0x2a>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8002582:	2302      	movs	r3, #2
 8002584:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8002588:	2100      	movs	r1, #0
 800258a:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800258c:	f7ff fd54 	bl	8002038 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8002590:	4628      	mov	r0, r5
 8002592:	f000 f9bb 	bl	800290c <USBD_CtlSendStatus>
 8002596:	e6be      	b.n	8002316 <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 8002598:	4621      	mov	r1, r4
 800259a:	4628      	mov	r0, r5
 800259c:	f7ff fe9c 	bl	80022d8 <USBD_CtlError>
            return;
 80025a0:	e6b9      	b.n	8002316 <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 80025a2:	f000 f9b3 	bl	800290c <USBD_CtlSendStatus>
 80025a6:	e6b6      	b.n	8002316 <USBD_StdDevReq+0x2a>
  if (req->wLength != 1U)
 80025a8:	88cb      	ldrh	r3, [r1, #6]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d10a      	bne.n	80025c4 <USBD_StdDevReq+0x2d8>
    switch (pdev->dev_state)
 80025ae:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d909      	bls.n	80025ca <USBD_StdDevReq+0x2de>
 80025b6:	2b03      	cmp	r3, #3
 80025b8:	d108      	bne.n	80025cc <USBD_StdDevReq+0x2e0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80025ba:	2201      	movs	r2, #1
 80025bc:	1d01      	adds	r1, r0, #4
 80025be:	f000 f979 	bl	80028b4 <USBD_CtlSendData>
        break;
 80025c2:	e6a8      	b.n	8002316 <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 80025c4:	f7ff fe88 	bl	80022d8 <USBD_CtlError>
 80025c8:	e6a5      	b.n	8002316 <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 80025ca:	b923      	cbnz	r3, 80025d6 <USBD_StdDevReq+0x2ea>
        USBD_CtlError(pdev, req);
 80025cc:	4621      	mov	r1, r4
 80025ce:	4628      	mov	r0, r5
 80025d0:	f7ff fe82 	bl	80022d8 <USBD_CtlError>
        break;
 80025d4:	e69f      	b.n	8002316 <USBD_StdDevReq+0x2a>
        pdev->dev_default_config = 0U;
 80025d6:	4601      	mov	r1, r0
 80025d8:	2300      	movs	r3, #0
 80025da:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80025de:	2201      	movs	r2, #1
 80025e0:	f000 f968 	bl	80028b4 <USBD_CtlSendData>
        break;
 80025e4:	e697      	b.n	8002316 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 80025e6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80025ea:	3b01      	subs	r3, #1
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d813      	bhi.n	8002618 <USBD_StdDevReq+0x32c>
      if (req->wLength != 0x2U)
 80025f0:	88cb      	ldrh	r3, [r1, #6]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d10d      	bne.n	8002612 <USBD_StdDevReq+0x326>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80025f6:	2301      	movs	r3, #1
 80025f8:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80025fa:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80025fe:	b10b      	cbz	r3, 8002604 <USBD_StdDevReq+0x318>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8002600:	2303      	movs	r3, #3
 8002602:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8002604:	2202      	movs	r2, #2
 8002606:	f105 010c 	add.w	r1, r5, #12
 800260a:	4628      	mov	r0, r5
 800260c:	f000 f952 	bl	80028b4 <USBD_CtlSendData>
      break;
 8002610:	e681      	b.n	8002316 <USBD_StdDevReq+0x2a>
        USBD_CtlError(pdev, req);
 8002612:	f7ff fe61 	bl	80022d8 <USBD_CtlError>
        break;
 8002616:	e67e      	b.n	8002316 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8002618:	f7ff fe5e 	bl	80022d8 <USBD_CtlError>
      break;
 800261c:	e67b      	b.n	8002316 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800261e:	884b      	ldrh	r3, [r1, #2]
 8002620:	2b01      	cmp	r3, #1
 8002622:	f47f ae78 	bne.w	8002316 <USBD_StdDevReq+0x2a>
    pdev->dev_remote_wakeup = 1U;
 8002626:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800262a:	f000 f96f 	bl	800290c <USBD_CtlSendStatus>
 800262e:	e672      	b.n	8002316 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8002630:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002634:	3b01      	subs	r3, #1
 8002636:	2b02      	cmp	r3, #2
 8002638:	d809      	bhi.n	800264e <USBD_StdDevReq+0x362>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800263a:	884b      	ldrh	r3, [r1, #2]
 800263c:	2b01      	cmp	r3, #1
 800263e:	f47f ae6a 	bne.w	8002316 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8002648:	f000 f960 	bl	800290c <USBD_CtlSendStatus>
 800264c:	e663      	b.n	8002316 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 800264e:	f7ff fe43 	bl	80022d8 <USBD_CtlError>
      break;
 8002652:	e660      	b.n	8002316 <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 8002654:	f7ff fe40 	bl	80022d8 <USBD_CtlError>
          break;
 8002658:	e65d      	b.n	8002316 <USBD_StdDevReq+0x2a>
 800265a:	bf00      	nop
 800265c:	20000200 	.word	0x20000200

08002660 <USBD_StdItfReq>:
{
 8002660:	b538      	push	{r3, r4, r5, lr}
 8002662:	4605      	mov	r5, r0
 8002664:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002666:	780b      	ldrb	r3, [r1, #0]
 8002668:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800266c:	2a40      	cmp	r2, #64	; 0x40
 800266e:	d006      	beq.n	800267e <USBD_StdItfReq+0x1e>
 8002670:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002674:	d003      	beq.n	800267e <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 8002676:	f7ff fe2f 	bl	80022d8 <USBD_CtlError>
}
 800267a:	2000      	movs	r0, #0
 800267c:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 800267e:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8002682:	3b01      	subs	r3, #1
 8002684:	2b02      	cmp	r3, #2
 8002686:	d816      	bhi.n	80026b6 <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8002688:	7923      	ldrb	r3, [r4, #4]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d80e      	bhi.n	80026ac <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800268e:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	4621      	mov	r1, r4
 8002696:	4628      	mov	r0, r5
 8002698:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800269a:	88e3      	ldrh	r3, [r4, #6]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1ec      	bne.n	800267a <USBD_StdItfReq+0x1a>
 80026a0:	2800      	cmp	r0, #0
 80026a2:	d1ea      	bne.n	800267a <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 80026a4:	4628      	mov	r0, r5
 80026a6:	f000 f931 	bl	800290c <USBD_CtlSendStatus>
 80026aa:	e7e6      	b.n	800267a <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 80026ac:	4621      	mov	r1, r4
 80026ae:	4628      	mov	r0, r5
 80026b0:	f7ff fe12 	bl	80022d8 <USBD_CtlError>
 80026b4:	e7e1      	b.n	800267a <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 80026b6:	4621      	mov	r1, r4
 80026b8:	4628      	mov	r0, r5
 80026ba:	f7ff fe0d 	bl	80022d8 <USBD_CtlError>
          break;
 80026be:	e7dc      	b.n	800267a <USBD_StdItfReq+0x1a>

080026c0 <USBD_StdEPReq>:
{
 80026c0:	b538      	push	{r3, r4, r5, lr}
 80026c2:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80026c4:	780b      	ldrb	r3, [r1, #0]
 80026c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80026ca:	2b20      	cmp	r3, #32
 80026cc:	d005      	beq.n	80026da <USBD_StdEPReq+0x1a>
 80026ce:	2b40      	cmp	r3, #64	; 0x40
 80026d0:	d003      	beq.n	80026da <USBD_StdEPReq+0x1a>
 80026d2:	b14b      	cbz	r3, 80026e8 <USBD_StdEPReq+0x28>
      USBD_CtlError(pdev, req);
 80026d4:	f7ff fe00 	bl	80022d8 <USBD_CtlError>
      break;
 80026d8:	e004      	b.n	80026e4 <USBD_StdEPReq+0x24>
      pdev->pClass->Setup(pdev, req);
 80026da:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	4620      	mov	r0, r4
 80026e2:	4798      	blx	r3
}
 80026e4:	2000      	movs	r0, #0
 80026e6:	bd38      	pop	{r3, r4, r5, pc}
  ep_addr  = LOBYTE(req->wIndex);
 80026e8:	888a      	ldrh	r2, [r1, #4]
 80026ea:	b2d0      	uxtb	r0, r2
      switch (req->bRequest)
 80026ec:	784b      	ldrb	r3, [r1, #1]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d031      	beq.n	8002756 <USBD_StdEPReq+0x96>
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	d005      	beq.n	8002702 <USBD_StdEPReq+0x42>
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d056      	beq.n	80027a8 <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 80026fa:	4620      	mov	r0, r4
 80026fc:	f7ff fdec 	bl	80022d8 <USBD_CtlError>
          break;
 8002700:	e7f0      	b.n	80026e4 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 8002702:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8002706:	2b02      	cmp	r3, #2
 8002708:	d005      	beq.n	8002716 <USBD_StdEPReq+0x56>
 800270a:	2b03      	cmp	r3, #3
 800270c:	d013      	beq.n	8002736 <USBD_StdEPReq+0x76>
              USBD_CtlError(pdev, req);
 800270e:	4620      	mov	r0, r4
 8002710:	f7ff fde2 	bl	80022d8 <USBD_CtlError>
              break;
 8002714:	e7e6      	b.n	80026e4 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8002716:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 800271a:	d008      	beq.n	800272e <USBD_StdEPReq+0x6e>
                USBD_LL_StallEP(pdev, ep_addr);
 800271c:	4601      	mov	r1, r0
 800271e:	4620      	mov	r0, r4
 8002720:	f000 faf0 	bl	8002d04 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8002724:	2180      	movs	r1, #128	; 0x80
 8002726:	4620      	mov	r0, r4
 8002728:	f000 faec 	bl	8002d04 <USBD_LL_StallEP>
 800272c:	e7da      	b.n	80026e4 <USBD_StdEPReq+0x24>
                USBD_CtlError(pdev, req);
 800272e:	4620      	mov	r0, r4
 8002730:	f7ff fdd2 	bl	80022d8 <USBD_CtlError>
 8002734:	e7d6      	b.n	80026e4 <USBD_StdEPReq+0x24>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8002736:	884b      	ldrh	r3, [r1, #2]
 8002738:	b923      	cbnz	r3, 8002744 <USBD_StdEPReq+0x84>
                if ((ep_addr != 0x00U) &&
 800273a:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 800273e:	d001      	beq.n	8002744 <USBD_StdEPReq+0x84>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8002740:	88cb      	ldrh	r3, [r1, #6]
 8002742:	b11b      	cbz	r3, 800274c <USBD_StdEPReq+0x8c>
              USBD_CtlSendStatus(pdev);
 8002744:	4620      	mov	r0, r4
 8002746:	f000 f8e1 	bl	800290c <USBD_CtlSendStatus>
              break;
 800274a:	e7cb      	b.n	80026e4 <USBD_StdEPReq+0x24>
                  USBD_LL_StallEP(pdev, ep_addr);
 800274c:	4601      	mov	r1, r0
 800274e:	4620      	mov	r0, r4
 8002750:	f000 fad8 	bl	8002d04 <USBD_LL_StallEP>
 8002754:	e7f6      	b.n	8002744 <USBD_StdEPReq+0x84>
          switch (pdev->dev_state)
 8002756:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800275a:	2b02      	cmp	r3, #2
 800275c:	d005      	beq.n	800276a <USBD_StdEPReq+0xaa>
 800275e:	2b03      	cmp	r3, #3
 8002760:	d013      	beq.n	800278a <USBD_StdEPReq+0xca>
              USBD_CtlError(pdev, req);
 8002762:	4620      	mov	r0, r4
 8002764:	f7ff fdb8 	bl	80022d8 <USBD_CtlError>
              break;
 8002768:	e7bc      	b.n	80026e4 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800276a:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 800276e:	d008      	beq.n	8002782 <USBD_StdEPReq+0xc2>
                USBD_LL_StallEP(pdev, ep_addr);
 8002770:	4601      	mov	r1, r0
 8002772:	4620      	mov	r0, r4
 8002774:	f000 fac6 	bl	8002d04 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8002778:	2180      	movs	r1, #128	; 0x80
 800277a:	4620      	mov	r0, r4
 800277c:	f000 fac2 	bl	8002d04 <USBD_LL_StallEP>
 8002780:	e7b0      	b.n	80026e4 <USBD_StdEPReq+0x24>
                USBD_CtlError(pdev, req);
 8002782:	4620      	mov	r0, r4
 8002784:	f7ff fda8 	bl	80022d8 <USBD_CtlError>
 8002788:	e7ac      	b.n	80026e4 <USBD_StdEPReq+0x24>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800278a:	884b      	ldrh	r3, [r1, #2]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1a9      	bne.n	80026e4 <USBD_StdEPReq+0x24>
                if ((ep_addr & 0x7FU) != 0x00U)
 8002790:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8002794:	d103      	bne.n	800279e <USBD_StdEPReq+0xde>
                USBD_CtlSendStatus(pdev);
 8002796:	4620      	mov	r0, r4
 8002798:	f000 f8b8 	bl	800290c <USBD_CtlSendStatus>
 800279c:	e7a2      	b.n	80026e4 <USBD_StdEPReq+0x24>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800279e:	4601      	mov	r1, r0
 80027a0:	4620      	mov	r0, r4
 80027a2:	f000 fab7 	bl	8002d14 <USBD_LL_ClearStallEP>
 80027a6:	e7f6      	b.n	8002796 <USBD_StdEPReq+0xd6>
          switch (pdev->dev_state)
 80027a8:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d005      	beq.n	80027bc <USBD_StdEPReq+0xfc>
 80027b0:	2b03      	cmp	r3, #3
 80027b2:	d018      	beq.n	80027e6 <USBD_StdEPReq+0x126>
              USBD_CtlError(pdev, req);
 80027b4:	4620      	mov	r0, r4
 80027b6:	f7ff fd8f 	bl	80022d8 <USBD_CtlError>
              break;
 80027ba:	e793      	b.n	80026e4 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80027bc:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 80027c0:	d003      	beq.n	80027ca <USBD_StdEPReq+0x10a>
                USBD_CtlError(pdev, req);
 80027c2:	4620      	mov	r0, r4
 80027c4:	f7ff fd88 	bl	80022d8 <USBD_CtlError>
                break;
 80027c8:	e78c      	b.n	80026e4 <USBD_StdEPReq+0x24>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80027ca:	f012 0f80 	tst.w	r2, #128	; 0x80
 80027ce:	bf14      	ite	ne
 80027d0:	f104 0114 	addne.w	r1, r4, #20
 80027d4:	f504 71aa 	addeq.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 80027d8:	2300      	movs	r3, #0
 80027da:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80027dc:	2202      	movs	r2, #2
 80027de:	4620      	mov	r0, r4
 80027e0:	f000 f868 	bl	80028b4 <USBD_CtlSendData>
              break;
 80027e4:	e77e      	b.n	80026e4 <USBD_StdEPReq+0x24>
              if ((ep_addr & 0x80U) == 0x80U)
 80027e6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80027ea:	d11b      	bne.n	8002824 <USBD_StdEPReq+0x164>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80027ec:	f000 030f 	and.w	r3, r0, #15
 80027f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80027f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80027f8:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80027fc:	b333      	cbz	r3, 800284c <USBD_StdEPReq+0x18c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80027fe:	f000 037f 	and.w	r3, r0, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8002802:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002806:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 800280a:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800280e:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8002812:	d11f      	bne.n	8002854 <USBD_StdEPReq+0x194>
                pep->status = 0x0000U;
 8002814:	2300      	movs	r3, #0
 8002816:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8002818:	2202      	movs	r2, #2
 800281a:	4629      	mov	r1, r5
 800281c:	4620      	mov	r0, r4
 800281e:	f000 f849 	bl	80028b4 <USBD_CtlSendData>
              break;
 8002822:	e75f      	b.n	80026e4 <USBD_StdEPReq+0x24>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8002824:	f000 030f 	and.w	r3, r0, #15
 8002828:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800282c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	b13b      	cbz	r3, 8002844 <USBD_StdEPReq+0x184>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8002834:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8002838:	3501      	adds	r5, #1
 800283a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800283e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8002842:	e7e4      	b.n	800280e <USBD_StdEPReq+0x14e>
                  USBD_CtlError(pdev, req);
 8002844:	4620      	mov	r0, r4
 8002846:	f7ff fd47 	bl	80022d8 <USBD_CtlError>
                  break;
 800284a:	e74b      	b.n	80026e4 <USBD_StdEPReq+0x24>
                  USBD_CtlError(pdev, req);
 800284c:	4620      	mov	r0, r4
 800284e:	f7ff fd43 	bl	80022d8 <USBD_CtlError>
                  break;
 8002852:	e747      	b.n	80026e4 <USBD_StdEPReq+0x24>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8002854:	4601      	mov	r1, r0
 8002856:	4620      	mov	r0, r4
 8002858:	f000 fa1c 	bl	8002c94 <USBD_LL_IsStallEP>
 800285c:	b110      	cbz	r0, 8002864 <USBD_StdEPReq+0x1a4>
                pep->status = 0x0001U;
 800285e:	2301      	movs	r3, #1
 8002860:	602b      	str	r3, [r5, #0]
 8002862:	e7d9      	b.n	8002818 <USBD_StdEPReq+0x158>
                pep->status = 0x0000U;
 8002864:	2300      	movs	r3, #0
 8002866:	602b      	str	r3, [r5, #0]
 8002868:	e7d6      	b.n	8002818 <USBD_StdEPReq+0x158>

0800286a <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 800286a:	b310      	cbz	r0, 80028b2 <USBD_GetString+0x48>
{
 800286c:	b510      	push	{r4, lr}
 800286e:	4684      	mov	ip, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8002870:	7803      	ldrb	r3, [r0, #0]
 8002872:	b143      	cbz	r3, 8002886 <USBD_GetString+0x1c>
 8002874:	f1c0 0e01 	rsb	lr, r0, #1
  {
    len++;
 8002878:	eb00 030e 	add.w	r3, r0, lr
 800287c:	b2db      	uxtb	r3, r3
  while (*buf != '\0')
 800287e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8002882:	2c00      	cmp	r4, #0
 8002884:	d1f8      	bne.n	8002878 <USBD_GetString+0xe>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	3302      	adds	r3, #2
 800288a:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800288c:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800288e:	2303      	movs	r3, #3
 8002890:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 8002892:	f89c 0000 	ldrb.w	r0, [ip]
 8002896:	b158      	cbz	r0, 80028b0 <USBD_GetString+0x46>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8002898:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 800289a:	2400      	movs	r4, #0
      unicode[idx++] = *desc++;
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	54c8      	strb	r0, [r1, r3]
      unicode[idx++] =  0U;
 80028a2:	3302      	adds	r3, #2
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	548c      	strb	r4, [r1, r2]
    while (*desc != '\0')
 80028a8:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 80028ac:	2800      	cmp	r0, #0
 80028ae:	d1f5      	bne.n	800289c <USBD_GetString+0x32>
}
 80028b0:	bd10      	pop	{r4, pc}
 80028b2:	4770      	bx	lr

080028b4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80028b4:	b508      	push	{r3, lr}
 80028b6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80028b8:	2202      	movs	r2, #2
 80028ba:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80028be:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 80028c0:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80028c2:	460a      	mov	r2, r1
 80028c4:	2100      	movs	r1, #0
 80028c6:	f000 fa35 	bl	8002d34 <USBD_LL_Transmit>

  return USBD_OK;
}
 80028ca:	2000      	movs	r0, #0
 80028cc:	bd08      	pop	{r3, pc}

080028ce <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80028ce:	b508      	push	{r3, lr}
 80028d0:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80028d2:	460a      	mov	r2, r1
 80028d4:	2100      	movs	r1, #0
 80028d6:	f000 fa2d 	bl	8002d34 <USBD_LL_Transmit>

  return USBD_OK;
}
 80028da:	2000      	movs	r0, #0
 80028dc:	bd08      	pop	{r3, pc}

080028de <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80028de:	b508      	push	{r3, lr}
 80028e0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80028e2:	2203      	movs	r2, #3
 80028e4:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80028e8:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80028ec:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80028f0:	460a      	mov	r2, r1
 80028f2:	2100      	movs	r1, #0
 80028f4:	f000 fa26 	bl	8002d44 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80028f8:	2000      	movs	r0, #0
 80028fa:	bd08      	pop	{r3, pc}

080028fc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80028fc:	b508      	push	{r3, lr}
 80028fe:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8002900:	460a      	mov	r2, r1
 8002902:	2100      	movs	r1, #0
 8002904:	f000 fa1e 	bl	8002d44 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8002908:	2000      	movs	r0, #0
 800290a:	bd08      	pop	{r3, pc}

0800290c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800290c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800290e:	2304      	movs	r3, #4
 8002910:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8002914:	2300      	movs	r3, #0
 8002916:	461a      	mov	r2, r3
 8002918:	4619      	mov	r1, r3
 800291a:	f000 fa0b 	bl	8002d34 <USBD_LL_Transmit>

  return USBD_OK;
}
 800291e:	2000      	movs	r0, #0
 8002920:	bd08      	pop	{r3, pc}

08002922 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8002922:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8002924:	2305      	movs	r3, #5
 8002926:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800292a:	2300      	movs	r3, #0
 800292c:	461a      	mov	r2, r3
 800292e:	4619      	mov	r1, r3
 8002930:	f000 fa08 	bl	8002d44 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8002934:	2000      	movs	r0, #0
 8002936:	bd08      	pop	{r3, pc}

08002938 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8002938:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800293a:	2200      	movs	r2, #0
 800293c:	490f      	ldr	r1, [pc, #60]	; (800297c <MX_USB_DEVICE_Init+0x44>)
 800293e:	4810      	ldr	r0, [pc, #64]	; (8002980 <MX_USB_DEVICE_Init+0x48>)
 8002940:	f7ff fb4b 	bl	8001fda <USBD_Init>
 8002944:	b970      	cbnz	r0, 8002964 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8002946:	490f      	ldr	r1, [pc, #60]	; (8002984 <MX_USB_DEVICE_Init+0x4c>)
 8002948:	480d      	ldr	r0, [pc, #52]	; (8002980 <MX_USB_DEVICE_Init+0x48>)
 800294a:	f7ff fb5d 	bl	8002008 <USBD_RegisterClass>
 800294e:	b960      	cbnz	r0, 800296a <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8002950:	490d      	ldr	r1, [pc, #52]	; (8002988 <MX_USB_DEVICE_Init+0x50>)
 8002952:	480b      	ldr	r0, [pc, #44]	; (8002980 <MX_USB_DEVICE_Init+0x48>)
 8002954:	f7ff fb13 	bl	8001f7e <USBD_CDC_RegisterInterface>
 8002958:	b950      	cbnz	r0, 8002970 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800295a:	4809      	ldr	r0, [pc, #36]	; (8002980 <MX_USB_DEVICE_Init+0x48>)
 800295c:	f7ff fb5b 	bl	8002016 <USBD_Start>
 8002960:	b948      	cbnz	r0, 8002976 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8002962:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002964:	f7fd fcae 	bl	80002c4 <Error_Handler>
 8002968:	e7ed      	b.n	8002946 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 800296a:	f7fd fcab 	bl	80002c4 <Error_Handler>
 800296e:	e7ef      	b.n	8002950 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8002970:	f7fd fca8 	bl	80002c4 <Error_Handler>
 8002974:	e7f1      	b.n	800295a <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8002976:	f7fd fca5 	bl	80002c4 <Error_Handler>
}
 800297a:	e7f2      	b.n	8002962 <MX_USB_DEVICE_Init+0x2a>
 800297c:	2000012c 	.word	0x2000012c
 8002980:	20000204 	.word	0x20000204
 8002984:	2000000c 	.word	0x2000000c
 8002988:	2000011c 	.word	0x2000011c

0800298c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800298c:	2000      	movs	r0, #0
 800298e:	4770      	bx	lr

08002990 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8002990:	2000      	movs	r0, #0
 8002992:	4770      	bx	lr

08002994 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8002994:	b510      	push	{r4, lr}
 8002996:	4601      	mov	r1, r0
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8002998:	4c04      	ldr	r4, [pc, #16]	; (80029ac <CDC_Receive_FS+0x18>)
 800299a:	4620      	mov	r0, r4
 800299c:	f7ff fafe 	bl	8001f9c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80029a0:	4620      	mov	r0, r4
 80029a2:	f7ff fb01 	bl	8001fa8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80029a6:	2000      	movs	r0, #0
 80029a8:	bd10      	pop	{r4, pc}
 80029aa:	bf00      	nop
 80029ac:	20000204 	.word	0x20000204

080029b0 <CDC_Init_FS>:
{
 80029b0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80029b2:	4c06      	ldr	r4, [pc, #24]	; (80029cc <CDC_Init_FS+0x1c>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	4906      	ldr	r1, [pc, #24]	; (80029d0 <CDC_Init_FS+0x20>)
 80029b8:	4620      	mov	r0, r4
 80029ba:	f7ff fae7 	bl	8001f8c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80029be:	4905      	ldr	r1, [pc, #20]	; (80029d4 <CDC_Init_FS+0x24>)
 80029c0:	4620      	mov	r0, r4
 80029c2:	f7ff faeb 	bl	8001f9c <USBD_CDC_SetRxBuffer>
}
 80029c6:	2000      	movs	r0, #0
 80029c8:	bd10      	pop	{r4, pc}
 80029ca:	bf00      	nop
 80029cc:	20000204 	.word	0x20000204
 80029d0:	20000cc8 	.word	0x20000cc8
 80029d4:	200004c8 	.word	0x200004c8

080029d8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80029d8:	2312      	movs	r3, #18
 80029da:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80029dc:	4800      	ldr	r0, [pc, #0]	; (80029e0 <USBD_FS_DeviceDescriptor+0x8>)
 80029de:	4770      	bx	lr
 80029e0:	20000148 	.word	0x20000148

080029e4 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80029e4:	2304      	movs	r3, #4
 80029e6:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80029e8:	4800      	ldr	r0, [pc, #0]	; (80029ec <USBD_FS_LangIDStrDescriptor+0x8>)
 80029ea:	4770      	bx	lr
 80029ec:	2000015c 	.word	0x2000015c

080029f0 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 80029f0:	b1b2      	cbz	r2, 8002a20 <IntToUnicode+0x30>
 80029f2:	1c4b      	adds	r3, r1, #1
 80029f4:	f102 3cff 	add.w	ip, r2, #4294967295
 80029f8:	fa5f fc8c 	uxtb.w	ip, ip
 80029fc:	3103      	adds	r1, #3
 80029fe:	eb01 014c 	add.w	r1, r1, ip, lsl #1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8002a02:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 8002a06:	0f02      	lsrs	r2, r0, #28
 8002a08:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8002a0c:	bf34      	ite	cc
 8002a0e:	3230      	addcc	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8002a10:	3237      	addcs	r2, #55	; 0x37
 8002a12:	f803 2c01 	strb.w	r2, [r3, #-1]
    value = value << 4;
 8002a16:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8002a18:	f803 cb02 	strb.w	ip, [r3], #2
  for (idx = 0; idx < len; idx++)
 8002a1c:	428b      	cmp	r3, r1
 8002a1e:	d1f2      	bne.n	8002a06 <IntToUnicode+0x16>
  }
}
 8002a20:	4770      	bx	lr
	...

08002a24 <USBD_FS_SerialStrDescriptor>:
{
 8002a24:	b538      	push	{r3, r4, r5, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8002a26:	231a      	movs	r3, #26
 8002a28:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <USBD_FS_SerialStrDescriptor+0x38>)
 8002a2c:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	; 0xa10
  deviceserial0 += deviceserial2;
 8002a30:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
  if (deviceserial0 != 0)
 8002a34:	18c0      	adds	r0, r0, r3
 8002a36:	d101      	bne.n	8002a3c <USBD_FS_SerialStrDescriptor+0x18>
}
 8002a38:	4809      	ldr	r0, [pc, #36]	; (8002a60 <USBD_FS_SerialStrDescriptor+0x3c>)
 8002a3a:	bd38      	pop	{r3, r4, r5, pc}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8002a3c:	4b07      	ldr	r3, [pc, #28]	; (8002a5c <USBD_FS_SerialStrDescriptor+0x38>)
 8002a3e:	f8d3 5a14 	ldr.w	r5, [r3, #2580]	; 0xa14
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8002a42:	4c07      	ldr	r4, [pc, #28]	; (8002a60 <USBD_FS_SerialStrDescriptor+0x3c>)
 8002a44:	2208      	movs	r2, #8
 8002a46:	1ca1      	adds	r1, r4, #2
 8002a48:	f7ff ffd2 	bl	80029f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8002a4c:	2204      	movs	r2, #4
 8002a4e:	f104 0112 	add.w	r1, r4, #18
 8002a52:	4628      	mov	r0, r5
 8002a54:	f7ff ffcc 	bl	80029f0 <IntToUnicode>
 8002a58:	e7ee      	b.n	8002a38 <USBD_FS_SerialStrDescriptor+0x14>
 8002a5a:	bf00      	nop
 8002a5c:	1fff7000 	.word	0x1fff7000
 8002a60:	20000160 	.word	0x20000160

08002a64 <USBD_FS_ProductStrDescriptor>:
{
 8002a64:	b508      	push	{r3, lr}
 8002a66:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8002a68:	4902      	ldr	r1, [pc, #8]	; (8002a74 <USBD_FS_ProductStrDescriptor+0x10>)
 8002a6a:	4803      	ldr	r0, [pc, #12]	; (8002a78 <USBD_FS_ProductStrDescriptor+0x14>)
 8002a6c:	f7ff fefd 	bl	800286a <USBD_GetString>
}
 8002a70:	4800      	ldr	r0, [pc, #0]	; (8002a74 <USBD_FS_ProductStrDescriptor+0x10>)
 8002a72:	bd08      	pop	{r3, pc}
 8002a74:	200014c8 	.word	0x200014c8
 8002a78:	08003048 	.word	0x08003048

08002a7c <USBD_FS_ManufacturerStrDescriptor>:
{
 8002a7c:	b510      	push	{r4, lr}
 8002a7e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002a80:	4c03      	ldr	r4, [pc, #12]	; (8002a90 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8002a82:	4621      	mov	r1, r4
 8002a84:	4803      	ldr	r0, [pc, #12]	; (8002a94 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8002a86:	f7ff fef0 	bl	800286a <USBD_GetString>
}
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	bd10      	pop	{r4, pc}
 8002a8e:	bf00      	nop
 8002a90:	200014c8 	.word	0x200014c8
 8002a94:	08003060 	.word	0x08003060

08002a98 <USBD_FS_ConfigStrDescriptor>:
{
 8002a98:	b508      	push	{r3, lr}
 8002a9a:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8002a9c:	4902      	ldr	r1, [pc, #8]	; (8002aa8 <USBD_FS_ConfigStrDescriptor+0x10>)
 8002a9e:	4803      	ldr	r0, [pc, #12]	; (8002aac <USBD_FS_ConfigStrDescriptor+0x14>)
 8002aa0:	f7ff fee3 	bl	800286a <USBD_GetString>
}
 8002aa4:	4800      	ldr	r0, [pc, #0]	; (8002aa8 <USBD_FS_ConfigStrDescriptor+0x10>)
 8002aa6:	bd08      	pop	{r3, pc}
 8002aa8:	200014c8 	.word	0x200014c8
 8002aac:	08003074 	.word	0x08003074

08002ab0 <USBD_FS_InterfaceStrDescriptor>:
{
 8002ab0:	b508      	push	{r3, lr}
 8002ab2:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8002ab4:	4902      	ldr	r1, [pc, #8]	; (8002ac0 <USBD_FS_InterfaceStrDescriptor+0x10>)
 8002ab6:	4803      	ldr	r0, [pc, #12]	; (8002ac4 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8002ab8:	f7ff fed7 	bl	800286a <USBD_GetString>
}
 8002abc:	4800      	ldr	r0, [pc, #0]	; (8002ac0 <USBD_FS_InterfaceStrDescriptor+0x10>)
 8002abe:	bd08      	pop	{r3, pc}
 8002ac0:	200014c8 	.word	0x200014c8
 8002ac4:	08003080 	.word	0x08003080

08002ac8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002ac8:	b530      	push	{r4, r5, lr}
 8002aca:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002acc:	2300      	movs	r3, #0
 8002ace:	9303      	str	r3, [sp, #12]
 8002ad0:	9304      	str	r3, [sp, #16]
 8002ad2:	9305      	str	r3, [sp, #20]
 8002ad4:	9306      	str	r3, [sp, #24]
 8002ad6:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002ad8:	6803      	ldr	r3, [r0, #0]
 8002ada:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ade:	d001      	beq.n	8002ae4 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002ae0:	b009      	add	sp, #36	; 0x24
 8002ae2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae4:	2500      	movs	r5, #0
 8002ae6:	9501      	str	r5, [sp, #4]
 8002ae8:	4c16      	ldr	r4, [pc, #88]	; (8002b44 <HAL_PCD_MspInit+0x7c>)
 8002aea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	6323      	str	r3, [r4, #48]	; 0x30
 8002af2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	9301      	str	r3, [sp, #4]
 8002afa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002afc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002b00:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b02:	2302      	movs	r3, #2
 8002b04:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b06:	2303      	movs	r3, #3
 8002b08:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002b0a:	230a      	movs	r3, #10
 8002b0c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0e:	a903      	add	r1, sp, #12
 8002b10:	480d      	ldr	r0, [pc, #52]	; (8002b48 <HAL_PCD_MspInit+0x80>)
 8002b12:	f7fd fcdd 	bl	80004d0 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002b16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b1c:	6363      	str	r3, [r4, #52]	; 0x34
 8002b1e:	9502      	str	r5, [sp, #8]
 8002b20:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b26:	6463      	str	r3, [r4, #68]	; 0x44
 8002b28:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b2e:	9302      	str	r3, [sp, #8]
 8002b30:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8002b32:	462a      	mov	r2, r5
 8002b34:	4629      	mov	r1, r5
 8002b36:	2043      	movs	r0, #67	; 0x43
 8002b38:	f7fd fc72 	bl	8000420 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8002b3c:	2043      	movs	r0, #67	; 0x43
 8002b3e:	f7fd fca5 	bl	800048c <HAL_NVIC_EnableIRQ>
}
 8002b42:	e7cd      	b.n	8002ae0 <HAL_PCD_MspInit+0x18>
 8002b44:	40023800 	.word	0x40023800
 8002b48:	40020000 	.word	0x40020000

08002b4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002b4c:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002b4e:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8002b52:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8002b56:	f7ff fa76 	bl	8002046 <USBD_LL_SetupStage>
}
 8002b5a:	bd08      	pop	{r3, pc}

08002b5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002b5c:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002b5e:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8002b62:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002b66:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8002b6a:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8002b6e:	f7ff fa97 	bl	80020a0 <USBD_LL_DataOutStage>
}
 8002b72:	bd08      	pop	{r3, pc}

08002b74 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002b74:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002b76:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8002b7a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002b7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b80:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8002b84:	f7ff fad0 	bl	8002128 <USBD_LL_DataInStage>
}
 8002b88:	bd08      	pop	{r3, pc}

08002b8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002b8a:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8002b8c:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8002b90:	f7ff fb6f 	bl	8002272 <USBD_LL_SOF>
}
 8002b94:	bd08      	pop	{r3, pc}

08002b96 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002b96:	b510      	push	{r4, lr}
 8002b98:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8002b9a:	68c3      	ldr	r3, [r0, #12]
 8002b9c:	b13b      	cbz	r3, 8002bae <HAL_PCD_ResetCallback+0x18>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d101      	bne.n	8002ba6 <HAL_PCD_ResetCallback+0x10>
  {
    speed = USBD_SPEED_FULL;
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	e004      	b.n	8002bb0 <HAL_PCD_ResetCallback+0x1a>
  }
  else
  {
    Error_Handler();
 8002ba6:	f7fd fb8d 	bl	80002c4 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8002baa:	2101      	movs	r1, #1
 8002bac:	e000      	b.n	8002bb0 <HAL_PCD_ResetCallback+0x1a>
    speed = USBD_SPEED_HIGH;
 8002bae:	2100      	movs	r1, #0
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8002bb0:	f8d4 03fc 	ldr.w	r0, [r4, #1020]	; 0x3fc
 8002bb4:	f7ff fb47 	bl	8002246 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002bb8:	f8d4 03fc 	ldr.w	r0, [r4, #1020]	; 0x3fc
 8002bbc:	f7ff fb1b 	bl	80021f6 <USBD_LL_Reset>
}
 8002bc0:	bd10      	pop	{r4, pc}
	...

08002bc4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002bc4:	b510      	push	{r4, lr}
 8002bc6:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002bc8:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8002bcc:	f7ff fb3e 	bl	800224c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8002bd0:	6822      	ldr	r2, [r4, #0]
 8002bd2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8002bde:	6a23      	ldr	r3, [r4, #32]
 8002be0:	b123      	cbz	r3, 8002bec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002be2:	4a03      	ldr	r2, [pc, #12]	; (8002bf0 <HAL_PCD_SuspendCallback+0x2c>)
 8002be4:	6913      	ldr	r3, [r2, #16]
 8002be6:	f043 0306 	orr.w	r3, r3, #6
 8002bea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8002bec:	bd10      	pop	{r4, pc}
 8002bee:	bf00      	nop
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002bf4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002bf6:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8002bfa:	f7ff fb30 	bl	800225e <USBD_LL_Resume>
}
 8002bfe:	bd08      	pop	{r3, pc}

08002c00 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002c00:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8002c02:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8002c06:	f7ff fb44 	bl	8002292 <USBD_LL_IsoOUTIncomplete>
}
 8002c0a:	bd08      	pop	{r3, pc}

08002c0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002c0c:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8002c0e:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8002c12:	f7ff fb3c 	bl	800228e <USBD_LL_IsoINIncomplete>
}
 8002c16:	bd08      	pop	{r3, pc}

08002c18 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002c18:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8002c1a:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8002c1e:	f7ff fb3a 	bl	8002296 <USBD_LL_DevConnected>
}
 8002c22:	bd08      	pop	{r3, pc}

08002c24 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002c24:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8002c26:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8002c2a:	f7ff fb36 	bl	800229a <USBD_LL_DevDisconnected>
}
 8002c2e:	bd08      	pop	{r3, pc}

08002c30 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8002c30:	7802      	ldrb	r2, [r0, #0]
 8002c32:	b10a      	cbz	r2, 8002c38 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8002c34:	2000      	movs	r0, #0
 8002c36:	4770      	bx	lr
{
 8002c38:	b510      	push	{r4, lr}
 8002c3a:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 8002c3c:	4814      	ldr	r0, [pc, #80]	; (8002c90 <USBD_LL_Init+0x60>)
 8002c3e:	f8c0 33fc 	str.w	r3, [r0, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 8002c42:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002c46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c4a:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002c4c:	2304      	movs	r3, #4
 8002c4e:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002c50:	2202      	movs	r2, #2
 8002c52:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002c54:	2300      	movs	r3, #0
 8002c56:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002c58:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002c5a:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002c5c:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002c5e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002c60:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002c62:	f7fd fd4f 	bl	8000704 <HAL_PCD_Init>
 8002c66:	b980      	cbnz	r0, 8002c8a <USBD_LL_Init+0x5a>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8002c68:	4c09      	ldr	r4, [pc, #36]	; (8002c90 <USBD_LL_Init+0x60>)
 8002c6a:	2180      	movs	r1, #128	; 0x80
 8002c6c:	4620      	mov	r0, r4
 8002c6e:	f7fe fa93 	bl	8001198 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8002c72:	2240      	movs	r2, #64	; 0x40
 8002c74:	2100      	movs	r1, #0
 8002c76:	4620      	mov	r0, r4
 8002c78:	f7fe fa6a 	bl	8001150 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8002c7c:	2280      	movs	r2, #128	; 0x80
 8002c7e:	2101      	movs	r1, #1
 8002c80:	4620      	mov	r0, r4
 8002c82:	f7fe fa65 	bl	8001150 <HAL_PCDEx_SetTxFiFo>
}
 8002c86:	2000      	movs	r0, #0
 8002c88:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8002c8a:	f7fd fb1b 	bl	80002c4 <Error_Handler>
 8002c8e:	e7eb      	b.n	8002c68 <USBD_LL_Init+0x38>
 8002c90:	200016c8 	.word	0x200016c8

08002c94 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002c94:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0

  if((ep_addr & 0x80) == 0x80)
 8002c98:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8002c9c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002ca0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002ca4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8002ca8:	bf14      	ite	ne
 8002caa:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8002cae:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
  }
}
 8002cb2:	4770      	bx	lr

08002cb4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002cb4:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8002cb6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002cba:	f7fe f997 	bl	8000fec <HAL_PCD_EP_GetRxCount>
}
 8002cbe:	bd08      	pop	{r3, pc}

08002cc0 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8002cc0:	b120      	cbz	r0, 8002ccc <USBD_Get_USB_Status+0xc>
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8002cc2:	2802      	cmp	r0, #2
 8002cc4:	bf14      	ite	ne
 8002cc6:	2002      	movne	r0, #2
 8002cc8:	2001      	moveq	r0, #1
 8002cca:	4770      	bx	lr
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8002ccc:	4770      	bx	lr

08002cce <USBD_LL_Start>:
{
 8002cce:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8002cd0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002cd4:	f7fd fdad 	bl	8000832 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8002cd8:	f7ff fff2 	bl	8002cc0 <USBD_Get_USB_Status>
}
 8002cdc:	bd08      	pop	{r3, pc}

08002cde <USBD_LL_OpenEP>:
{
 8002cde:	b508      	push	{r3, lr}
 8002ce0:	4694      	mov	ip, r2
 8002ce2:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8002ce4:	4663      	mov	r3, ip
 8002ce6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002cea:	f7fe f8d9 	bl	8000ea0 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8002cee:	f7ff ffe7 	bl	8002cc0 <USBD_Get_USB_Status>
}
 8002cf2:	bd08      	pop	{r3, pc}

08002cf4 <USBD_LL_CloseEP>:
{
 8002cf4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8002cf6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002cfa:	f7fe f912 	bl	8000f22 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8002cfe:	f7ff ffdf 	bl	8002cc0 <USBD_Get_USB_Status>
}
 8002d02:	bd08      	pop	{r3, pc}

08002d04 <USBD_LL_StallEP>:
{
 8002d04:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002d06:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002d0a:	f7fe f9a6 	bl	800105a <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8002d0e:	f7ff ffd7 	bl	8002cc0 <USBD_Get_USB_Status>
}
 8002d12:	bd08      	pop	{r3, pc}

08002d14 <USBD_LL_ClearStallEP>:
{
 8002d14:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8002d16:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002d1a:	f7fe f9e0 	bl	80010de <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8002d1e:	f7ff ffcf 	bl	8002cc0 <USBD_Get_USB_Status>
}
 8002d22:	bd08      	pop	{r3, pc}

08002d24 <USBD_LL_SetUSBAddress>:
{
 8002d24:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002d26:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002d2a:	f7fe f8a5 	bl	8000e78 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8002d2e:	f7ff ffc7 	bl	8002cc0 <USBD_Get_USB_Status>
}
 8002d32:	bd08      	pop	{r3, pc}

08002d34 <USBD_LL_Transmit>:
{
 8002d34:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002d36:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002d3a:	f7fe f960 	bl	8000ffe <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8002d3e:	f7ff ffbf 	bl	8002cc0 <USBD_Get_USB_Status>
}
 8002d42:	bd08      	pop	{r3, pc}

08002d44 <USBD_LL_PrepareReceive>:
{
 8002d44:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002d46:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002d4a:	f7fe f921 	bl	8000f90 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8002d4e:	f7ff ffb7 	bl	8002cc0 <USBD_Get_USB_Status>
}
 8002d52:	bd08      	pop	{r3, pc}

08002d54 <Reset_Handler>:
 8002d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d8c <LoopFillZerobss+0x12>
 8002d58:	480d      	ldr	r0, [pc, #52]	; (8002d90 <LoopFillZerobss+0x16>)
 8002d5a:	490e      	ldr	r1, [pc, #56]	; (8002d94 <LoopFillZerobss+0x1a>)
 8002d5c:	4a0e      	ldr	r2, [pc, #56]	; (8002d98 <LoopFillZerobss+0x1e>)
 8002d5e:	2300      	movs	r3, #0
 8002d60:	e002      	b.n	8002d68 <LoopCopyDataInit>

08002d62 <CopyDataInit>:
 8002d62:	58d4      	ldr	r4, [r2, r3]
 8002d64:	50c4      	str	r4, [r0, r3]
 8002d66:	3304      	adds	r3, #4

08002d68 <LoopCopyDataInit>:
 8002d68:	18c4      	adds	r4, r0, r3
 8002d6a:	428c      	cmp	r4, r1
 8002d6c:	d3f9      	bcc.n	8002d62 <CopyDataInit>
 8002d6e:	4a0b      	ldr	r2, [pc, #44]	; (8002d9c <LoopFillZerobss+0x22>)
 8002d70:	4c0b      	ldr	r4, [pc, #44]	; (8002da0 <LoopFillZerobss+0x26>)
 8002d72:	2300      	movs	r3, #0
 8002d74:	e001      	b.n	8002d7a <LoopFillZerobss>

08002d76 <FillZerobss>:
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	3204      	adds	r2, #4

08002d7a <LoopFillZerobss>:
 8002d7a:	42a2      	cmp	r2, r4
 8002d7c:	d3fb      	bcc.n	8002d76 <FillZerobss>
 8002d7e:	f7fd fad3 	bl	8000328 <SystemInit>
 8002d82:	f000 f811 	bl	8002da8 <__libc_init_array>
 8002d86:	f7fd fa7f 	bl	8000288 <main>
 8002d8a:	4770      	bx	lr
 8002d8c:	20020000 	.word	0x20020000
 8002d90:	20000000 	.word	0x20000000
 8002d94:	200001e0 	.word	0x200001e0
 8002d98:	08003098 	.word	0x08003098
 8002d9c:	200001e0 	.word	0x200001e0
 8002da0:	20001adc 	.word	0x20001adc

08002da4 <ADC_IRQHandler>:
 8002da4:	e7fe      	b.n	8002da4 <ADC_IRQHandler>
	...

08002da8 <__libc_init_array>:
 8002da8:	b570      	push	{r4, r5, r6, lr}
 8002daa:	2600      	movs	r6, #0
 8002dac:	4d0c      	ldr	r5, [pc, #48]	; (8002de0 <__libc_init_array+0x38>)
 8002dae:	4c0d      	ldr	r4, [pc, #52]	; (8002de4 <__libc_init_array+0x3c>)
 8002db0:	1b64      	subs	r4, r4, r5
 8002db2:	10a4      	asrs	r4, r4, #2
 8002db4:	42a6      	cmp	r6, r4
 8002db6:	d109      	bne.n	8002dcc <__libc_init_array+0x24>
 8002db8:	f000 f93a 	bl	8003030 <_init>
 8002dbc:	2600      	movs	r6, #0
 8002dbe:	4d0a      	ldr	r5, [pc, #40]	; (8002de8 <__libc_init_array+0x40>)
 8002dc0:	4c0a      	ldr	r4, [pc, #40]	; (8002dec <__libc_init_array+0x44>)
 8002dc2:	1b64      	subs	r4, r4, r5
 8002dc4:	10a4      	asrs	r4, r4, #2
 8002dc6:	42a6      	cmp	r6, r4
 8002dc8:	d105      	bne.n	8002dd6 <__libc_init_array+0x2e>
 8002dca:	bd70      	pop	{r4, r5, r6, pc}
 8002dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dd0:	4798      	blx	r3
 8002dd2:	3601      	adds	r6, #1
 8002dd4:	e7ee      	b.n	8002db4 <__libc_init_array+0xc>
 8002dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dda:	4798      	blx	r3
 8002ddc:	3601      	adds	r6, #1
 8002dde:	e7f2      	b.n	8002dc6 <__libc_init_array+0x1e>
 8002de0:	08003090 	.word	0x08003090
 8002de4:	08003090 	.word	0x08003090
 8002de8:	08003090 	.word	0x08003090
 8002dec:	08003094 	.word	0x08003094

08002df0 <malloc>:
 8002df0:	4b02      	ldr	r3, [pc, #8]	; (8002dfc <malloc+0xc>)
 8002df2:	4601      	mov	r1, r0
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	f000 b87b 	b.w	8002ef0 <_malloc_r>
 8002dfa:	bf00      	nop
 8002dfc:	2000017c 	.word	0x2000017c

08002e00 <free>:
 8002e00:	4b02      	ldr	r3, [pc, #8]	; (8002e0c <free+0xc>)
 8002e02:	4601      	mov	r1, r0
 8002e04:	6818      	ldr	r0, [r3, #0]
 8002e06:	f000 b80b 	b.w	8002e20 <_free_r>
 8002e0a:	bf00      	nop
 8002e0c:	2000017c 	.word	0x2000017c

08002e10 <memset>:
 8002e10:	4603      	mov	r3, r0
 8002e12:	4402      	add	r2, r0
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d100      	bne.n	8002e1a <memset+0xa>
 8002e18:	4770      	bx	lr
 8002e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e1e:	e7f9      	b.n	8002e14 <memset+0x4>

08002e20 <_free_r>:
 8002e20:	b538      	push	{r3, r4, r5, lr}
 8002e22:	4605      	mov	r5, r0
 8002e24:	2900      	cmp	r1, #0
 8002e26:	d040      	beq.n	8002eaa <_free_r+0x8a>
 8002e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e2c:	1f0c      	subs	r4, r1, #4
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	bfb8      	it	lt
 8002e32:	18e4      	addlt	r4, r4, r3
 8002e34:	f000 f8e0 	bl	8002ff8 <__malloc_lock>
 8002e38:	4a1c      	ldr	r2, [pc, #112]	; (8002eac <_free_r+0x8c>)
 8002e3a:	6813      	ldr	r3, [r2, #0]
 8002e3c:	b933      	cbnz	r3, 8002e4c <_free_r+0x2c>
 8002e3e:	6063      	str	r3, [r4, #4]
 8002e40:	6014      	str	r4, [r2, #0]
 8002e42:	4628      	mov	r0, r5
 8002e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e48:	f000 b8dc 	b.w	8003004 <__malloc_unlock>
 8002e4c:	42a3      	cmp	r3, r4
 8002e4e:	d908      	bls.n	8002e62 <_free_r+0x42>
 8002e50:	6820      	ldr	r0, [r4, #0]
 8002e52:	1821      	adds	r1, r4, r0
 8002e54:	428b      	cmp	r3, r1
 8002e56:	bf01      	itttt	eq
 8002e58:	6819      	ldreq	r1, [r3, #0]
 8002e5a:	685b      	ldreq	r3, [r3, #4]
 8002e5c:	1809      	addeq	r1, r1, r0
 8002e5e:	6021      	streq	r1, [r4, #0]
 8002e60:	e7ed      	b.n	8002e3e <_free_r+0x1e>
 8002e62:	461a      	mov	r2, r3
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	b10b      	cbz	r3, 8002e6c <_free_r+0x4c>
 8002e68:	42a3      	cmp	r3, r4
 8002e6a:	d9fa      	bls.n	8002e62 <_free_r+0x42>
 8002e6c:	6811      	ldr	r1, [r2, #0]
 8002e6e:	1850      	adds	r0, r2, r1
 8002e70:	42a0      	cmp	r0, r4
 8002e72:	d10b      	bne.n	8002e8c <_free_r+0x6c>
 8002e74:	6820      	ldr	r0, [r4, #0]
 8002e76:	4401      	add	r1, r0
 8002e78:	1850      	adds	r0, r2, r1
 8002e7a:	4283      	cmp	r3, r0
 8002e7c:	6011      	str	r1, [r2, #0]
 8002e7e:	d1e0      	bne.n	8002e42 <_free_r+0x22>
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	4401      	add	r1, r0
 8002e86:	6011      	str	r1, [r2, #0]
 8002e88:	6053      	str	r3, [r2, #4]
 8002e8a:	e7da      	b.n	8002e42 <_free_r+0x22>
 8002e8c:	d902      	bls.n	8002e94 <_free_r+0x74>
 8002e8e:	230c      	movs	r3, #12
 8002e90:	602b      	str	r3, [r5, #0]
 8002e92:	e7d6      	b.n	8002e42 <_free_r+0x22>
 8002e94:	6820      	ldr	r0, [r4, #0]
 8002e96:	1821      	adds	r1, r4, r0
 8002e98:	428b      	cmp	r3, r1
 8002e9a:	bf01      	itttt	eq
 8002e9c:	6819      	ldreq	r1, [r3, #0]
 8002e9e:	685b      	ldreq	r3, [r3, #4]
 8002ea0:	1809      	addeq	r1, r1, r0
 8002ea2:	6021      	streq	r1, [r4, #0]
 8002ea4:	6063      	str	r3, [r4, #4]
 8002ea6:	6054      	str	r4, [r2, #4]
 8002ea8:	e7cb      	b.n	8002e42 <_free_r+0x22>
 8002eaa:	bd38      	pop	{r3, r4, r5, pc}
 8002eac:	20001ac8 	.word	0x20001ac8

08002eb0 <sbrk_aligned>:
 8002eb0:	b570      	push	{r4, r5, r6, lr}
 8002eb2:	4e0e      	ldr	r6, [pc, #56]	; (8002eec <sbrk_aligned+0x3c>)
 8002eb4:	460c      	mov	r4, r1
 8002eb6:	6831      	ldr	r1, [r6, #0]
 8002eb8:	4605      	mov	r5, r0
 8002eba:	b911      	cbnz	r1, 8002ec2 <sbrk_aligned+0x12>
 8002ebc:	f000 f88c 	bl	8002fd8 <_sbrk_r>
 8002ec0:	6030      	str	r0, [r6, #0]
 8002ec2:	4621      	mov	r1, r4
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	f000 f887 	bl	8002fd8 <_sbrk_r>
 8002eca:	1c43      	adds	r3, r0, #1
 8002ecc:	d00a      	beq.n	8002ee4 <sbrk_aligned+0x34>
 8002ece:	1cc4      	adds	r4, r0, #3
 8002ed0:	f024 0403 	bic.w	r4, r4, #3
 8002ed4:	42a0      	cmp	r0, r4
 8002ed6:	d007      	beq.n	8002ee8 <sbrk_aligned+0x38>
 8002ed8:	1a21      	subs	r1, r4, r0
 8002eda:	4628      	mov	r0, r5
 8002edc:	f000 f87c 	bl	8002fd8 <_sbrk_r>
 8002ee0:	3001      	adds	r0, #1
 8002ee2:	d101      	bne.n	8002ee8 <sbrk_aligned+0x38>
 8002ee4:	f04f 34ff 	mov.w	r4, #4294967295
 8002ee8:	4620      	mov	r0, r4
 8002eea:	bd70      	pop	{r4, r5, r6, pc}
 8002eec:	20001acc 	.word	0x20001acc

08002ef0 <_malloc_r>:
 8002ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ef4:	1ccd      	adds	r5, r1, #3
 8002ef6:	f025 0503 	bic.w	r5, r5, #3
 8002efa:	3508      	adds	r5, #8
 8002efc:	2d0c      	cmp	r5, #12
 8002efe:	bf38      	it	cc
 8002f00:	250c      	movcc	r5, #12
 8002f02:	2d00      	cmp	r5, #0
 8002f04:	4607      	mov	r7, r0
 8002f06:	db01      	blt.n	8002f0c <_malloc_r+0x1c>
 8002f08:	42a9      	cmp	r1, r5
 8002f0a:	d905      	bls.n	8002f18 <_malloc_r+0x28>
 8002f0c:	230c      	movs	r3, #12
 8002f0e:	2600      	movs	r6, #0
 8002f10:	603b      	str	r3, [r7, #0]
 8002f12:	4630      	mov	r0, r6
 8002f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f18:	4e2e      	ldr	r6, [pc, #184]	; (8002fd4 <_malloc_r+0xe4>)
 8002f1a:	f000 f86d 	bl	8002ff8 <__malloc_lock>
 8002f1e:	6833      	ldr	r3, [r6, #0]
 8002f20:	461c      	mov	r4, r3
 8002f22:	bb34      	cbnz	r4, 8002f72 <_malloc_r+0x82>
 8002f24:	4629      	mov	r1, r5
 8002f26:	4638      	mov	r0, r7
 8002f28:	f7ff ffc2 	bl	8002eb0 <sbrk_aligned>
 8002f2c:	1c43      	adds	r3, r0, #1
 8002f2e:	4604      	mov	r4, r0
 8002f30:	d14d      	bne.n	8002fce <_malloc_r+0xde>
 8002f32:	6834      	ldr	r4, [r6, #0]
 8002f34:	4626      	mov	r6, r4
 8002f36:	2e00      	cmp	r6, #0
 8002f38:	d140      	bne.n	8002fbc <_malloc_r+0xcc>
 8002f3a:	6823      	ldr	r3, [r4, #0]
 8002f3c:	4631      	mov	r1, r6
 8002f3e:	4638      	mov	r0, r7
 8002f40:	eb04 0803 	add.w	r8, r4, r3
 8002f44:	f000 f848 	bl	8002fd8 <_sbrk_r>
 8002f48:	4580      	cmp	r8, r0
 8002f4a:	d13a      	bne.n	8002fc2 <_malloc_r+0xd2>
 8002f4c:	6821      	ldr	r1, [r4, #0]
 8002f4e:	3503      	adds	r5, #3
 8002f50:	1a6d      	subs	r5, r5, r1
 8002f52:	f025 0503 	bic.w	r5, r5, #3
 8002f56:	3508      	adds	r5, #8
 8002f58:	2d0c      	cmp	r5, #12
 8002f5a:	bf38      	it	cc
 8002f5c:	250c      	movcc	r5, #12
 8002f5e:	4638      	mov	r0, r7
 8002f60:	4629      	mov	r1, r5
 8002f62:	f7ff ffa5 	bl	8002eb0 <sbrk_aligned>
 8002f66:	3001      	adds	r0, #1
 8002f68:	d02b      	beq.n	8002fc2 <_malloc_r+0xd2>
 8002f6a:	6823      	ldr	r3, [r4, #0]
 8002f6c:	442b      	add	r3, r5
 8002f6e:	6023      	str	r3, [r4, #0]
 8002f70:	e00e      	b.n	8002f90 <_malloc_r+0xa0>
 8002f72:	6822      	ldr	r2, [r4, #0]
 8002f74:	1b52      	subs	r2, r2, r5
 8002f76:	d41e      	bmi.n	8002fb6 <_malloc_r+0xc6>
 8002f78:	2a0b      	cmp	r2, #11
 8002f7a:	d916      	bls.n	8002faa <_malloc_r+0xba>
 8002f7c:	1961      	adds	r1, r4, r5
 8002f7e:	42a3      	cmp	r3, r4
 8002f80:	6025      	str	r5, [r4, #0]
 8002f82:	bf18      	it	ne
 8002f84:	6059      	strne	r1, [r3, #4]
 8002f86:	6863      	ldr	r3, [r4, #4]
 8002f88:	bf08      	it	eq
 8002f8a:	6031      	streq	r1, [r6, #0]
 8002f8c:	5162      	str	r2, [r4, r5]
 8002f8e:	604b      	str	r3, [r1, #4]
 8002f90:	4638      	mov	r0, r7
 8002f92:	f104 060b 	add.w	r6, r4, #11
 8002f96:	f000 f835 	bl	8003004 <__malloc_unlock>
 8002f9a:	f026 0607 	bic.w	r6, r6, #7
 8002f9e:	1d23      	adds	r3, r4, #4
 8002fa0:	1af2      	subs	r2, r6, r3
 8002fa2:	d0b6      	beq.n	8002f12 <_malloc_r+0x22>
 8002fa4:	1b9b      	subs	r3, r3, r6
 8002fa6:	50a3      	str	r3, [r4, r2]
 8002fa8:	e7b3      	b.n	8002f12 <_malloc_r+0x22>
 8002faa:	6862      	ldr	r2, [r4, #4]
 8002fac:	42a3      	cmp	r3, r4
 8002fae:	bf0c      	ite	eq
 8002fb0:	6032      	streq	r2, [r6, #0]
 8002fb2:	605a      	strne	r2, [r3, #4]
 8002fb4:	e7ec      	b.n	8002f90 <_malloc_r+0xa0>
 8002fb6:	4623      	mov	r3, r4
 8002fb8:	6864      	ldr	r4, [r4, #4]
 8002fba:	e7b2      	b.n	8002f22 <_malloc_r+0x32>
 8002fbc:	4634      	mov	r4, r6
 8002fbe:	6876      	ldr	r6, [r6, #4]
 8002fc0:	e7b9      	b.n	8002f36 <_malloc_r+0x46>
 8002fc2:	230c      	movs	r3, #12
 8002fc4:	4638      	mov	r0, r7
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	f000 f81c 	bl	8003004 <__malloc_unlock>
 8002fcc:	e7a1      	b.n	8002f12 <_malloc_r+0x22>
 8002fce:	6025      	str	r5, [r4, #0]
 8002fd0:	e7de      	b.n	8002f90 <_malloc_r+0xa0>
 8002fd2:	bf00      	nop
 8002fd4:	20001ac8 	.word	0x20001ac8

08002fd8 <_sbrk_r>:
 8002fd8:	b538      	push	{r3, r4, r5, lr}
 8002fda:	2300      	movs	r3, #0
 8002fdc:	4d05      	ldr	r5, [pc, #20]	; (8002ff4 <_sbrk_r+0x1c>)
 8002fde:	4604      	mov	r4, r0
 8002fe0:	4608      	mov	r0, r1
 8002fe2:	602b      	str	r3, [r5, #0]
 8002fe4:	f000 f816 	bl	8003014 <_sbrk>
 8002fe8:	1c43      	adds	r3, r0, #1
 8002fea:	d102      	bne.n	8002ff2 <_sbrk_r+0x1a>
 8002fec:	682b      	ldr	r3, [r5, #0]
 8002fee:	b103      	cbz	r3, 8002ff2 <_sbrk_r+0x1a>
 8002ff0:	6023      	str	r3, [r4, #0]
 8002ff2:	bd38      	pop	{r3, r4, r5, pc}
 8002ff4:	20001ad0 	.word	0x20001ad0

08002ff8 <__malloc_lock>:
 8002ff8:	4801      	ldr	r0, [pc, #4]	; (8003000 <__malloc_lock+0x8>)
 8002ffa:	f000 b809 	b.w	8003010 <__retarget_lock_acquire_recursive>
 8002ffe:	bf00      	nop
 8003000:	20001ad4 	.word	0x20001ad4

08003004 <__malloc_unlock>:
 8003004:	4801      	ldr	r0, [pc, #4]	; (800300c <__malloc_unlock+0x8>)
 8003006:	f000 b804 	b.w	8003012 <__retarget_lock_release_recursive>
 800300a:	bf00      	nop
 800300c:	20001ad4 	.word	0x20001ad4

08003010 <__retarget_lock_acquire_recursive>:
 8003010:	4770      	bx	lr

08003012 <__retarget_lock_release_recursive>:
 8003012:	4770      	bx	lr

08003014 <_sbrk>:
 8003014:	4a04      	ldr	r2, [pc, #16]	; (8003028 <_sbrk+0x14>)
 8003016:	4905      	ldr	r1, [pc, #20]	; (800302c <_sbrk+0x18>)
 8003018:	6813      	ldr	r3, [r2, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	bf08      	it	eq
 800301e:	460b      	moveq	r3, r1
 8003020:	4418      	add	r0, r3
 8003022:	6010      	str	r0, [r2, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	4770      	bx	lr
 8003028:	20001ad8 	.word	0x20001ad8
 800302c:	20001ae0 	.word	0x20001ae0

08003030 <_init>:
 8003030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003032:	bf00      	nop
 8003034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003036:	bc08      	pop	{r3}
 8003038:	469e      	mov	lr, r3
 800303a:	4770      	bx	lr

0800303c <_fini>:
 800303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303e:	bf00      	nop
 8003040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003042:	bc08      	pop	{r3}
 8003044:	469e      	mov	lr, r3
 8003046:	4770      	bx	lr
